{
  "name": "core",
  "description": "**core/** is the engine room of the chess game: every rule, state-transition, and AI evaluation route flows through this directory. It is structured to stay *head-less* (no graphics, no network) so the same logic powers CLI, GUI, and server builds. Source files live one class per file under **core/src/**, with mirrored unit tests under **core/tests/**. Keep in mind that only *pure* data objects (no side-effects) should leave this folder; adapters for I/O belong higher up the tree.\n\n**Phase 1 — Board & Piece Representation (Weeks 1-2)**  \nCreate an 8 × 8 _Bitboard_ class plus a *Piece* enum capturing type and color. Provide factory helpers in **core/board/fen.rs** to parse FEN and emit starting positions. Aim for O(1) access to any square and pre-compute color masks for fast move generation. CI gate: 100% coverage on legality of initial FEN strings and round-trip serialization.\n\n**Phase 2 — Rules Engine & Move Generation (Weeks 3-4)**  \nImplement **core/rules/** with a *MoveGenerator* trait and concrete *StandardRules* struct. Cover castling, en passant, promotion, threefold repetition, and the 50-move rule. Plug in _Perft_ tests at depths 1-5 to verify node counts match published tables. Add benchmark targets so future PRs can’t slow generation by more than *±5 µs per move*.\n\n**Phase 3 — Game Flow, AI Hooks & Testing (Weeks 5-6)**  \nWire a *Game* aggregate that owns a *Board*, a *MoveHistory*, and exposes async *apply_move()* / *undo()* APIs. Stub an *Evaluator* interface for minimax or NNUE back-ends in **core/ai/**. ~~underline~~Internal-only prototypes may live in **core/experimental/** until promoted. Finish with property-based tests (QuickCheck) ensuring *apply* followed by *undo* yields identical bitboards across one million random games.\n",
  "files": [
    {
      "path": "core/test.py",
      "name": "test.py",
      "description": "fskfjsklfslkdfnskn\nfslkfnsdlknfs\n;nklfsdnflk'n\nnklsnf\nlskn",
      "codeBlocks": [
        {
          "id": "block_86a8479e",
          "type": "code",
          "content": "// Modified at 2025-07-06T21:40:31.088Z\n# TIMING TEST - 2025-07-06T21:25:07.164Z\n# This should appear in GitHub immediately\n# No more lag!\n# post debug test",
          "language": "python",
          "description": "Main content of core/test.py",
          "order": 0,
          "file": "core/test.py",
          "meta": {
            "segmentType": "other",
            "startLine": 1,
            "endLine": 5
          }
        }
      ]
    },
    {
      "path": "core/types.ts",
      "name": "types.ts",
      "description": "",
      "codeBlocks": [
        {
          "id": "block_f46f4572",
          "type": "code",
          "content": "// try\n// and try again\n// one last times\nexport interface UserProfile {\n  firstName: string;\n  lastName: string;\n  avatar?: string;\n  bio?: string;\n  location?: string;\n  socialLinks?: {\n    twitter?: string;\n    github?: string;\n    linkedin?: string;\n  };\n}",
          "language": "typescript",
          "description": "block 1 description...",
          "order": 0,
          "file": "core/types.ts",
          "meta": {
            "segmentType": "comment",
            "startLine": 1,
            "endLine": 15
          }
        },
        {
          "id": "block_c7a62788",
          "type": "code",
          "content": "<<<<<<< HEAD\nexport type UserRole = 'admin' | 'user' | 'moderator';\n// #endregion\n\n// #region Authentication Types\nexport interface AuthState {\n  isAuthenticated: boolean;\n  user: User | null;\n  token: string | null;\n  loading: boolean;\n  error: string | null;\n}\n\nexport interface LoginCredentials {\n  username: string;\n  password: string;\n  remember?: boolean;\n}\n\nexport interface RegistrationData extends LoginCredentials {\n  email: string;\n  confirmPassword: string;\n}\n// #endregion\n\n// #region API Types\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: {\n    code: string;\n    message: string;\n    details?: unknown;\n  };\n}\n\nexport interface PaginatedResponse<T> extends ApiResponse<T[]> {\n  pagination: {\n    total: number;\n    page: number;\n    pageSize: number;\n    totalPages: number;\n  };\n}\n// #endregion\n\n// Game Types and Interfaces for Tic-Tac-Toe\n\nexport type Player = 'X' | 'O';\nexport type CellValue = Player | null;\nexport type Board = CellValue[];\n\nexport interface GameState {\n  board: Board;\n  currentPlayer: Player;\n  winner: Player | null;\n  isDraw: boolean;\n  isGameOver: boolean;\n  gameMode: GameMode;\n  moveCount: number;\n}\n\nexport type GameMode = 'ai' | 'player' | 'menu';\n\nexport interface GameStats {\n  gamesPlayed: number;\n  wins: number;\n  losses: number;\n  draws: number;\n  winRate: number;\n}\n\nexport interface Move {\n  index: number;\n  player: Player;\n}\n\nexport interface GameConfig {\n  aiDifficulty: 'easy' | 'medium' | 'hard';\n  firstPlayer: Player;\n}\n\nexport interface WinningLine {\n  indices: number[];\n  pattern: 'row' | 'column' | 'diagonal';\n}\n\n// AI Types\nexport interface AIMove {\n  index: number;\n  score: number;\n}\n\nexport interface GameContextType {\n  gameState: GameState;\n  stats: GameStats;\n  makeMove: (index: number) => void;\n  resetGame: () => void;\n  setGameMode: (mode: GameMode) => void;\n  newGame: (mode: GameMode) => void;\n}\n\n// UI Component Props\nexport interface SquareProps {\n  value: CellValue;\n  onClick: () => void;\n  isWinning?: boolean;\n  disabled?: boolean;\n}\n\nexport interface BoardProps {\n  board: Board;\n  onSquareClick: (index: number) => void;\n  winningLine?: number[];\n  disabled?: boolean;\n}\n\nexport interface GameInfoProps {\n  currentPlayer: Player;\n  winner: Player | null;\n  isDraw: boolean;\n  gameMode: GameMode;\n  moveCount: number;\n}\n\nexport interface GameMenuProps {\n  onModeSelect: (mode: GameMode) => void;\n  stats: GameStats;\n}\n\nexport interface StatsDisplayProps {\n  stats: GameStats;\n}\n\n// Constants\nexport const INITIAL_BOARD: Board = Array(9).fill(null);\n\nexport const WINNING_COMBINATIONS: number[][] = [\n  [0, 1, 2], // top row\n  [3, 4, 5], // middle row\n  [6, 7, 8], // bottom row\n  [0, 3, 6], // left column\n  [1, 4, 7], // middle column\n  [2, 5, 8], // right column\n  [0, 4, 8], // diagonal top-left to bottom-right\n  [2, 4, 6], // diagonal top-right to bottom-left\n];\n\nexport const INITIAL_GAME_STATE: GameState = {\n  board: INITIAL_BOARD,\n  currentPlayer: 'X',\n  winner: null,\n  isDraw: false,\n  isGameOver: false,\n  gameMode: 'menu',\n  moveCount: 0,\n};\n\nexport const INITIAL_STATS: GameStats = {\n  gamesPlayed: 0,\n  wins: 0,\n  losses: 0,\n  draws: 0,\n  winRate: 0,\n}; \n=======\n85\n>>>>>>> 9228db559405d0bcf1ff3e8daf4b4a36c5f738af",
          "language": "typescript",
          "description": "Code block 2",
          "order": 1,
          "file": "core/types.ts",
          "meta": {
            "segmentType": "other",
            "startLine": 18,
            "endLine": 185
          }
        }
      ]
    }
  ],
  "created": "2025-07-06T04:38:07.196Z"
}