{
  "name": "hooks",
  "description": "",
  "files": [
    {
      "path": "core/hooks/useGame.ts",
      "name": "useGame.ts",
      "description": "",
      "codeBlocks": [
        {
          "id": "block_3260cd82",
          "type": "code",
          "content": "// Custom Hook for Game State Management\n\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  GameState,\n  GameMode,\n  Player,\n  INITIAL_GAME_STATE\n} from '@core/types';\n\nimport {\n  updateGameState,\n  createNewGameState,\n  isAITurn,\n  getWinningLine\n} from '@core/game/logic';\n\nimport { getAIMove } from '@core/game/ai';\nimport {\n  saveGameState,\n  loadGameState,\n  clearSavedGameState\n} from '@core/game/utils';\n\nexport const useGame = () => {\n  const [gameState, setGameState] = useState<GameState>(INITIAL_GAME_STATE);\n  const [isAIThinking, setIsAIThinking] = useState(false);\n\n  // Load saved game state on mount\n  useEffect(() => {\n    const savedState = loadGameState();\n    if (savedState && !savedState.isGameOver) {\n      setGameState(savedState);\n    }\n  }, []);\n\n  // Save game state whenever it changes\n  useEffect(() => {\n    if (gameState.moveCount > 0) {\n      saveGameState(gameState);\n    }\n  }, [gameState]);\n\n  // Handle AI moves\n  useEffect(() => {\n    const makeAIMove = async () => {\n      if (isAITurn(gameState) && !isAIThinking) {\n        setIsAIThinking(true);\n        \n        try {\n          const aiMoveIndex = await getAIMove(gameState.board, 'O', 'hard', 800);\n          \n                     if (aiMoveIndex !== -1) {\n             setGameState((prevState: GameState) => updateGameState(prevState, aiMoveIndex));\n           }\n        } catch (error) {\n          console.error('AI move failed:', error);\n        } finally {\n          setIsAIThinking(false);\n        }\n      }\n    };\n\n    makeAIMove();\n  }, [gameState, isAIThinking]);\n\n  /**\n   * Make a move at the specified index\n   */\n  const makeMove = useCallback((index: number) => {\n    if (\n      gameState.isGameOver ||\n      gameState.board[index] !== null ||\n      isAIThinking ||\n      (gameState.gameMode === 'ai' && gameState.currentPlayer === 'O')\n    ) {\n      return;\n    }\n\n         setGameState((prevState: GameState) => updateGameState(prevState, index));\n  }, [gameState, isAIThinking]);\n\n  /**\n   * Start a new game with the specified mode\n   */\n  const newGame = useCallback((mode: GameMode) => {\n    clearSavedGameState();\n    setGameState(createNewGameState(mode));\n    setIsAIThinking(false);\n  }, []);\n\n  /**\n   * Reset the current game (keep same mode)\n   */\n  const resetGame = useCallback(() => {\n    clearSavedGameState();\n    setGameState((prevState: GameState) => createNewGameState(prevState.gameMode));\n    setIsAIThinking(false);\n  }, []);\n\n  /**\n   * Set the game mode\n   */\n  const setGameMode = useCallback((mode: GameMode) => {\n    setGameState((prevState: GameState) => ({\n      ...prevState,\n      gameMode: mode\n    }));\n  }, []);\n\n  /**\n   * Go back to menu\n   */\n  const goToMenu = useCallback(() => {\n    setGameMode('menu');\n  }, [setGameMode]);\n\n  /**\n   * Get the winning line for highlighting\n   */\n  const winningLine = getWinningLine(gameState.board);\n\n  return {\n    gameState,\n    isAIThinking,\n    winningLine,\n    makeMove,\n    newGame,\n    resetGame,\n    setGameMode,\n    goToMenu,\n  };\n};\n\nexport default useGame; ",
          "language": "typescript",
          "description": "Main content of core/hooks/useGame.ts",
          "order": 0,
          "file": "core/hooks/useGame.ts",
          "meta": {
            "segmentType": "other",
            "startLine": 1,
            "endLine": 135
          }
        }
      ]
    },
    {
      "path": "core/hooks/useStats.ts",
      "name": "useStats.ts",
      "description": "",
      "codeBlocks": [
        {
          "id": "block_23b826dc",
          "type": "code",
          "content": "// Custom Hook for Game Statistics Management\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { GameStats, Player, GameMode } from '@core/types';\n\nimport {\n  loadGameStats,\n  updateGameStats as updateGameStatsUtil,\n  resetGameStats as resetGameStatsUtil,\n  formatGameStats\n} from '@core/game/utils';\n\nexport const useStats = () => {\n  const [stats, setStats] = useState<GameStats>(loadGameStats());\n\n  // Load stats on mount\n  useEffect(() => {\n    setStats(loadGameStats());\n  }, []);\n\n  /**\n   * Update statistics after a game ends\n   */\n  const updateStats = useCallback((winner: Player | null, gameMode: GameMode) => {\n    if (gameMode === 'menu') return;\n    \n    setStats((prevStats: GameStats) => \n      updateGameStatsUtil(prevStats, winner, gameMode as 'ai' | 'player')\n    );\n  }, []);\n\n  /**\n   * Reset all statistics\n   */\n  const resetStats = useCallback(() => {\n    const newStats = resetGameStatsUtil();\n    setStats(newStats);\n  }, []);\n\n  /**\n   * Get formatted statistics for display\n   */\n  const formattedStats = formatGameStats(stats);\n\n  return {\n    stats,\n    formattedStats,\n    updateStats,\n    resetStats,\n  };\n};\n\nexport default useStats; ",
          "language": "typescript",
          "description": "Main content of core/hooks/useStats.ts",
          "order": 0,
          "file": "core/hooks/useStats.ts",
          "meta": {
            "segmentType": "other",
            "startLine": 1,
            "endLine": 53
          }
        }
      ]
    }
  ],
  "created": "2025-07-16T04:23:50.463Z"
}