{
  "title": "API Test - 2025-07-22T06:51:33.306Z",
  "description": "API integration test save",
  "modules": [
    "root",
    "core",
    "my-project",
    "my-react-app",
    "public",
    "src",
    "ui"
  ],
  "lastModified": "2025-07-22T06:51:33.326Z",
  "moduleData": {
    "root": {
      "name": "root",
      "description": "// Test edit at 2025-07-22T06:51:31.230Z",
      "files": [
        {
          "path": "README.md",
          "name": "README.md",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_2a680fcf",
              "type": "code",
              "content": "// Test edit at 2025-07-22T06:51:31.230Z\n// Test edit at 2025-07-22T06:35:35.961Z\n// Test edit at 2025-07-22T02:58:21.819Z\n// Test edit at 2025-07-18T01:39:56.252Z\n// Test edit at 2025-07-18T01:34:42.227Z\n// Test edit at 2025-07-18T01:27:15.121Z\n// Test edit at 2025-07-18T01:18:52.449Z\n// Test edit at 2025-07-17T23:02:09.924Z\n// Test edit at 2025-07-17T22:40:49.876Z\n# Tic-Tac-Toe Online\n\n<<<<<<< HEAD\nA modern, interactive online tic-tac-toe game built with React and TypeScript. Play against friends or challenge the AI in this beautifully designed web application.\n\n## Features\n\n- 🎮 **Interactive Gameplay**: Smooth, responsive tic-tac-toe game interface\n- 🤖 **AI Opponent**: Play against an intelligent computer opponent\n- 👥 **Two Player Mode**: Play with friends on the same device\n- 🎨 **Modern UI**: Clean, responsive design with smooth animations\n- 📱 **Mobile Friendly**: Optimized for both desktop and mobile devices\n- 🔄 **Game Statistics**: Track your wins, losses, and draws\n- ⚡ **Real-time Updates**: Instant game state updates\n\n## How to Play\n\n1. Choose your game mode (vs AI or vs Player)\n2. Players take turns placing X's and O's on the 3x3 grid\n3. First player to get 3 in a row (horizontally, vertically, or diagonally) wins!\n4. If all squares are filled with no winner, it's a draw\n\n## Game Rules\n\n- X always goes first\n- Players alternate turns\n- A player wins by placing three marks in a row:\n  - Horizontally (across)\n  - Vertically (up and down)\n  - Diagonally (corner to corner)\n- The game ends when someone wins or all squares are filled\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js (version 16 or higher)\n- npm or yarn\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd tic-tac-toe-online\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Start the development server:\n```bash\nnpm start\n```\n\n4. Open your browser and navigate to `http://localhost:3000`\n\n## Project Structure\n\n```\ntic-tac-toe-online/\n├── README.md\n├── package.json\n├── tsconfig.json\n├── public/\n│   └── index.html\n├── core/\n│   ├── types.ts          # Game types and interfaces\n│   ├── game/\n│   │   ├── logic.ts      # Game logic and rules\n│   │   ├── ai.ts         # AI opponent logic\n│   │   └── utils.ts      # Game utilities\n│   └── hooks/\n│       ├── useGame.ts    # Game state management\n│       └── useStats.ts   # Statistics tracking\n└── ui/\n    ├── components/\n    │   ├── Game/\n    │   │   ├── Board.tsx\n    │   │   ├── Square.tsx\n    │   │   └── GameInfo.tsx\n    │   ├── Menu/\n    │   │   ├── GameMenu.tsx\n    │   │   └── ModeSelector.tsx\n    │   └── common/\n    │       ├── Button.tsx\n    │       └── Card.tsx\n    ├── styles/\n    │   ├── globals.css\n    │   └── components.css\n    └── App.tsx\n```\n\n## Technologies Used\n\n- **React 18** - Frontend framework\n- **TypeScript** - Type safety and better development experience\n- **Emotion** - CSS-in-JS styling\n- **React Router** - Navigation and routing\n- **Modern CSS** - Responsive design and animations\n\n## Available Scripts\n\n- `npm start` - Runs the app in development mode\n- `npm build` - Builds the app for production\n- `npm test` - Launches the test runner\n- `npm run lint` - Runs ESLint to check code quality\n- `npm run format` - Formats code using Prettier\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is open source and available under the [MIT License](LICENSE).\n\n## Acknowledgments\n\n- Inspired by the classic tic-tac-toe game\n- Built with modern web technologies for the best user experience\n=======\n-  L OT OF TEXT WAS DELETED OOPSY\n- seeing if it do beetter now\n- test edit again'\n\n- 505pm test\n505\n725725\n8\n850\n911\n911\n950gdfg\n11\ndfh\njkhs\nblobby\n>>>>>>> 9228db559405d0bcf1ff3e8daf4b4a36c5f738af\n",
              "language": "markdown",
              "description": "Main content of README.md",
              "order": 0,
              "file": "README.md",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 155
              }
            }
          ]
        },
        {
          "path": "framework.md",
          "name": "framework.md",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_34824032",
              "type": "code",
              "content": "# vibe-creation-test - Framework\n\n## Technical Framework\n\nThis document outlines the technical framework, architecture, and development practices for the vibe-creation-test project.\n\n## Architecture Overview\n\n<!-- Describe the high-level architecture -->\n\n## Technology Stack\n\n### Core Technologies\n- <!-- List primary technologies -->\n- <!-- List frameworks and libraries -->\n\n### Development Tools\n- <!-- List development tools -->\n- <!-- List build and deployment tools -->\n\n## Development Standards\n\n### Code Style\n- <!-- Define coding standards -->\n- <!-- Define naming conventions -->\n\n### Git Workflow\n- <!-- Define branching strategy -->\n- <!-- Define commit message format -->\n\n### Testing Strategy\n- <!-- Define testing approach -->\n- <!-- Define test coverage goals -->\n\n## Project Structure\n\n### Directory Organization\n```\nvibe-creation-test/\n├── <!-- Define directory structure -->\n├── <!-- Define component organization -->\n└── <!-- Define configuration files -->\n```\n\n### Module Organization\n- <!-- Define module structure -->\n- <!-- Define component hierarchy -->\n\n## Development Process\n\n### Setup Instructions\n1. <!-- Installation steps -->\n2. <!-- Configuration steps -->\n3. <!-- Development environment setup -->\n\n### Build Process\n- <!-- Build instructions -->\n- <!-- Deployment process -->\n\n## Performance Guidelines\n\n<!-- Define performance standards and optimization strategies -->\n\n## Security Considerations\n\n<!-- Outline security practices and requirements -->\n\n## Maintenance and Support\n\n<!-- Define maintenance procedures and support processes -->\n\n---\n\n*This document was automatically generated on 2025-07-10*\n*Please customize it to reflect your project's specific framework and technical approach.*\n",
              "language": "markdown",
              "description": "Main content of framework.md",
              "order": 0,
              "file": "framework.md",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 76
              }
            }
          ]
        },
        {
          "path": "narrative-structure.json",
          "name": "narrative-structure.json",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_f4534b8e",
              "type": "code",
              "content": "{\n  \"id\": \"test\",\n  \"content\": \"TESTING SAVE\"\n}\n85",
              "language": "json",
              "description": "Main content of narrative-structure.json",
              "order": 0,
              "file": "narrative-structure.json",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 5
              }
            }
          ]
        },
        {
          "path": "narrative.json",
          "name": "narrative.json",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_5f5ef214",
              "type": "code",
              "content": "{\"narrative\":{\"title\":\"minimal-test\",\"description\":\"DEBUG SAVE TEST - 2025-07-06T17:55:14.331Z\\nTesting commit flow with explicit commitId\",\"modules\":[\"core\",\"my-project\",\"my-react-app\",\"public\",\"src\",\"ui\",\"root\"],\"moduleData\":{\"core\":{\"name\":\"core\",\"description\":\"\",\"files\":[{\"path\":\"core/test.py\",\"name\":\"test.py\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_dd2b485b\",\"type\":\"code\",\"content\":\"# DEBUG SAVE TEST - 2025-07-06T17:55:14.331Z\\n# Testing explicit commitId: debug-save-1751824514331\\n# Should commit and push!\",\"language\":\"python\",\"description\":\"Main content of core/test.py\",\"order\":0,\"file\":\"core/test.py\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":3}}]},{\"path\":\"core/types.ts\",\"name\":\"types.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_279cf60d\",\"type\":\"code\",\"content\":\"// try\\n// and try again\\n// one last times\\nexport interface UserProfile {\\n  firstName: string;\\n  lastName: string;\\n  avatar?: string;\\n  bio?: string;\\n  location?: string;\\n  socialLinks?: {\\n    twitter?: string;\\n    github?: string;\\n    linkedin?: string;\\n  };\\n}\",\"language\":\"typescript\",\"description\":\"block 1 description...\",\"order\":0,\"file\":\"core/types.ts\",\"meta\":{\"segmentType\":\"comment\",\"startLine\":1,\"endLine\":15}},{\"id\":\"block_10d8f23c\",\"type\":\"code\",\"content\":\"<<<<<<< HEAD\\nexport type UserRole = 'admin' | 'user' | 'moderator';\\n// #endregion\\n\\n// #region Authentication Types\\nexport interface AuthState {\\n  isAuthenticated: boolean;\\n  user: User | null;\\n  token: string | null;\\n  loading: boolean;\\n  error: string | null;\\n}\\n\\nexport interface LoginCredentials {\\n  username: string;\\n  password: string;\\n  remember?: boolean;\\n}\\n\\nexport interface RegistrationData extends LoginCredentials {\\n  email: string;\\n  confirmPassword: string;\\n}\\n// #endregion\\n\\n// #region API Types\\nexport interface ApiResponse<T> {\\n  success: boolean;\\n  data?: T;\\n  error?: {\\n    code: string;\\n    message: string;\\n    details?: unknown;\\n  };\\n}\\n\\nexport interface PaginatedResponse<T> extends ApiResponse<T[]> {\\n  pagination: {\\n    total: number;\\n    page: number;\\n    pageSize: number;\\n    totalPages: number;\\n  };\\n}\\n// #endregion\\n\\n// Game Types and Interfaces for Tic-Tac-Toe\\n\\nexport type Player = 'X' | 'O';\\nexport type CellValue = Player | null;\\nexport type Board = CellValue[];\\n\\nexport interface GameState {\\n  board: Board;\\n  currentPlayer: Player;\\n  winner: Player | null;\\n  isDraw: boolean;\\n  isGameOver: boolean;\\n  gameMode: GameMode;\\n  moveCount: number;\\n}\\n\\nexport type GameMode = 'ai' | 'player' | 'menu';\\n\\nexport interface GameStats {\\n  gamesPlayed: number;\\n  wins: number;\\n  losses: number;\\n  draws: number;\\n  winRate: number;\\n}\\n\\nexport interface Move {\\n  index: number;\\n  player: Player;\\n}\\n\\nexport interface GameConfig {\\n  aiDifficulty: 'easy' | 'medium' | 'hard';\\n  firstPlayer: Player;\\n}\\n\\nexport interface WinningLine {\\n  indices: number[];\\n  pattern: 'row' | 'column' | 'diagonal';\\n}\\n\\n// AI Types\\nexport interface AIMove {\\n  index: number;\\n  score: number;\\n}\\n\\nexport interface GameContextType {\\n  gameState: GameState;\\n  stats: GameStats;\\n  makeMove: (index: number) => void;\\n  resetGame: () => void;\\n  setGameMode: (mode: GameMode) => void;\\n  newGame: (mode: GameMode) => void;\\n}\\n\\n// UI Component Props\\nexport interface SquareProps {\\n  value: CellValue;\\n  onClick: () => void;\\n  isWinning?: boolean;\\n  disabled?: boolean;\\n}\\n\\nexport interface BoardProps {\\n  board: Board;\\n  onSquareClick: (index: number) => void;\\n  winningLine?: number[];\\n  disabled?: boolean;\\n}\\n\\nexport interface GameInfoProps {\\n  currentPlayer: Player;\\n  winner: Player | null;\\n  isDraw: boolean;\\n  gameMode: GameMode;\\n  moveCount: number;\\n}\\n\\nexport interface GameMenuProps {\\n  onModeSelect: (mode: GameMode) => void;\\n  stats: GameStats;\\n}\\n\\nexport interface StatsDisplayProps {\\n  stats: GameStats;\\n}\\n\\n// Constants\\nexport const INITIAL_BOARD: Board = Array(9).fill(null);\\n\\nexport const WINNING_COMBINATIONS: number[][] = [\\n  [0, 1, 2], // top row\\n  [3, 4, 5], // middle row\\n  [6, 7, 8], // bottom row\\n  [0, 3, 6], // left column\\n  [1, 4, 7], // middle column\\n  [2, 5, 8], // right column\\n  [0, 4, 8], // diagonal top-left to bottom-right\\n  [2, 4, 6], // diagonal top-right to bottom-left\\n];\\n\\nexport const INITIAL_GAME_STATE: GameState = {\\n  board: INITIAL_BOARD,\\n  currentPlayer: 'X',\\n  winner: null,\\n  isDraw: false,\\n  isGameOver: false,\\n  gameMode: 'menu',\\n  moveCount: 0,\\n};\\n\\nexport const INITIAL_STATS: GameStats = {\\n  gamesPlayed: 0,\\n  wins: 0,\\n  losses: 0,\\n  draws: 0,\\n  winRate: 0,\\n}; \\n=======\\n85\\n>>>>>>> 9228db559405d0bcf1ff3e8daf4b4a36c5f738af\",\"language\":\"typescript\",\"description\":\"Code block 2\",\"order\":1,\"file\":\"core/types.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":18,\"endLine\":185}}]},{\"path\":\"core/auth/login.ts\",\"name\":\"login.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_4ee102c9\",\"type\":\"code\",\"content\":\"// Type definitions for authentication\\ninterface Credentials {\\n  username: string;\\n  password: string;\\n}\\n\\n//MY FIRST EDIT\\ninterface AuthResponse {\\n  token: string;\\n  user: User;\\n}\\n\\n//good here\\ninterface User {\\n  id: string;\\n  username: string;\\n  email: string;\\n  roles: string[];\\n}\\n\\n//725\\n//next day\\n//438\",\"language\":\"typescript\",\"description\":\"Main content of core/auth/login.ts\",\"order\":0,\"file\":\"core/auth/login.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":23}}]},{\"path\":\"core/auth/session.ts\",\"name\":\"session.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_3afac46f\",\"type\":\"code\",\"content\":\"const USER_KEY = 'user_data';\\n//85\\n\\nexport function saveSession(token: string, user: any): void {\\n  localStorage.setItem(TOKEN_KEY, token);\\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\\n}\\n//good ehre\\n\\nexport function clearSession(): void {\\n  localStorage.removeItem(TOKEN_KEY);\\n  localStorage.removeItem(USER_KEY);\\n}\\n//8\\n\\nconst TOKEN_KEY = 'auth_token';\",\"language\":\"typescript\",\"description\":\"Main content of core/auth/session.ts\",\"order\":0,\"file\":\"core/auth/session.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":16}}]},{\"path\":\"core/auth/providers/oauth.ts\",\"name\":\"oauth.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_71259b74\",\"type\":\"code\",\"content\":\"new shit to dow 911\\n950\\n\\nfanskldfnsadl;kfn;;sal\",\"language\":\"typescript\",\"description\":\"Main content of core/auth/providers/oauth.ts\",\"order\":0,\"file\":\"core/auth/providers/oauth.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":4}}]},{\"path\":\"core/game/ai.ts\",\"name\":\"ai.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_b43e7b64\",\"type\":\"code\",\"content\":\"---\\nid: 2b5baa18-2b5b-2b5b-2b5b-2b5baa18\\npath: core/game/ai.ts\\nlevel: file\\ntitle: \\\"Ai\\\"\\ndescription: \\\"TypeScript module\\\"\\n---\",\"language\":\"typescript\",\"description\":\"Code block 1\",\"order\":0,\"file\":\"core/game/ai.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":7}},{\"id\":\"block_54fb4715\",\"type\":\"code\",\"content\":\"* Evaluate the current board position\\n * @param board Current board state\\n * @param aiPlayer AI player symbol\\n * @returns Score evaluation\\n */\\n//test\\nexport const evaluateBoard = (board: Board, aiPlayer: Player): number => {\\n  const humanPlayer = aiPlayer === 'X' ? 'O' : 'X';\\n  const winner = checkWinner(board);\\n  \\n  if (winner === aiPlayer) return 10;\\n  if (winner === humanPlayer) return -10;\\n  if (checkDraw(board)) return 0;\\n  \\n  // Evaluate position based on potential winning lines\\n  let score = 0;\\n  const combinations = [\\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows\\n    [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns\\n    [0, 4, 8], [2, 4, 6] // diagona\",\"language\":\"typescript\",\"description\":\"Code block 2\",\"order\":1,\"file\":\"core/game/ai.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":10,\"endLine\":29}}]},{\"path\":\"core/game/logic.ts\",\"name\":\"logic.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_c0897890\",\"type\":\"code\",\"content\":\"---\\nid: 4b3401e4-4b34-4b34-4b34-4b3401e4\\npath: core/game/logic.ts\\nlevel: file\\ntitle: \\\"Logic\\\"\\ndescription: \\\"TypeScript module\\\"\\n---\\n//test\\n// Core Game Logic for Tic-Tac-Toe\\n\\nimport {\\n  Board,\\n  Player,\\n  GameState,\\n  CellValue,\\n  WINNING_COMBINATIONS,\\n  INITIAL_BOARD,\\n  Move,\\n  WinningLine\\n} from '@core/types';\\n\\n/**\\n * Check if there's a winner on the board\\n * @param board Current board state\\n * @returns Winner player or null if no winner\\n */\\nexport const checkWinner = (board: Board): Player | null => {\\n  for (const combination of WINNING_COMBINATIONS) {\\n    const [a, b, c] = combination;\\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\\n      return board[a] as Player;\\n    }\\n  }\\n  return null;\\n};\\n\\n/**\\n * Check if the game is a draw (board full with no winner)\\n * @param board Current board state\\n * @returns True if the game is a draw\\n */\\nexport const checkDraw = (board: Board): boolean => {\\n  return board.every(cell => cell !== null) && !checkWinner(board);\\n};\\n\\n/**\\n * Get the winning line indices if there's a winner\\n * @param board Current board state\\n * @returns Array of winning indices or null\\n */\\nexport const getWinningLine = (board: Board): number[] | null => {\\n  for (const combination of WINNING_COMBINATIONS) {\\n    const [a, b, c] = combination;\\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\\n      return combination;\\n    }\\n  }\\n  return null;\\n};\\n\\n/**\\n * Make a move on the board\\n * @param board Current board state\\n * @param index Square index to place the move\\n * @param player Player making the move\\n * @returns New board state or null if move is invalid\\n */\\nexport const makeMove = (board: Board, index: number, player: Player): Board | null => {\\n  if (index < 0 || index >= 9 || board[index] !== null) {\\n    return null; // Invalid move\\n  }\\n  \\n  const newBoard = [...board];\\n  newBoard[index] = player;\\n  return newBoard;\\n};\\n\\n/**\\n * Get available moves (empty squares)\\n * @param board Current board state\\n * @returns Array of available move indices\\n */\\nexport const getAvailableMoves = (board: Board): number[] => {\\n  return board\\n    .map((cell, index) => cell === null ? index : null)\\n    .filter(index => index !== null) as number[];\\n};\\n\\n/**\\n * Switch to the other player\\n * @param currentPlayer Current player\\n * @returns Other player\\n */\\nexport const switchPlayer = (currentPlayer: Player): Player => {\\n  return currentPlayer === 'X' ? 'O' : 'X';\\n};\\n\\n/**\\n * Check if a move is valid\\n * @param board Current board state\\n * @param index Square index to check\\n * @returns True if the move is valid\\n */\\nexport const isValidMove = (board: Board, index: number): boolean => {\\n  return index >= 0 && index < 9 && board[index] === null;\\n};\\n\\n/**\\n * Create a new game state\\n * @param gameMode Game mode to set\\n * @returns Initial game state\\n */\\nexport const createNewGameState = (gameMode: 'ai' | 'player' | 'menu' = 'menu'): GameState => {\\n  return {\\n    board: [...INITIAL_BOARD],\\n    currentPlayer: 'X',\\n    winner: null,\\n    isDraw: false,\\n    isGameOver: false,\\n    gameMode,\\n    moveCount: 0,\\n  };\\n};\\n\\n/**\\n * Update game state after a move\\n * @param gameState Current game state\\n * @param moveIndex Index of the move\\n * @returns Updated game state\\n */\\nexport const updateGameState = (gameState: GameState, moveIndex: number): GameState => {\\n  const newBoard = makeMove(gameState.board, moveIndex, gameState.currentPlayer);\\n  \\n  if (!newBoard) {\\n    return gameState; // Invalid move, return unchanged state\\n  }\\n  \\n  const winner = checkWinner(newBoard);\\n  const isDraw = checkDraw(newBoard);\\n  const isGameOver = winner !== null || isDraw;\\n  \\n  return {\\n    ...gameState,\\n    board: newBoard,\\n    currentPlayer: isGameOver ? gameState.currentPlayer : switchPlayer(gameState.currentPlayer),\\n    winner,\\n    isDraw,\\n    isGameOver,\\n    moveCount: gameState.moveCount + 1,\\n  };\\n};\\n\\n/**\\n * Get game status message\\n * @param gameState Current game state\\n * @returns Status message string\\n */\\nexport const getGameStatusMessage = (gameState: GameState): string => {\\n  if (gameState.winner) {\\n    return `Player ${gameState.winner} wins!`;\\n  }\\n  \\n  if (gameState.isDraw) {\\n    return \\\"It's a draw!\\\";\\n  }\\n  \\n  if (gameState.gameMode === 'ai' && gameState.currentPlayer === 'O') {\\n    return \\\"AI is thinking...\\\";\\n  }\\n  \\n  return `Player ${gameState.currentPlayer}'s turn`;\\n};\\n\\n/**\\n * Check if it's AI's turn\\n * @param gameState Current game state\\n * @returns True if it's AI's turn\\n */\\nexport const isAITurn = (gameState: GameState): boolean => {\\n  return gameState.gameMode === 'ai' && \\n         gameState.currentPlayer === 'O' && \\n         !gameState.isGameOver;\\n};\\n\\n/**\\n * Get the pattern type of a winning line\\n * @param winningIndices Winning line indices\\n * @returns Pattern type\\n */\\nexport const getWinningPattern = (winningIndices: number[]): 'row' | 'column' | 'diagonal' => {\\n  const [a, b, c] = winningIndices.sort((x, y) => x - y);\\n  \\n  // Check for rows\\n  if (Math.floor(a / 3) === Math.floor(b / 3) && Math.floor(b / 3) === Math.floor(c / 3)) {\\n    return 'row';\\n  }\\n  \\n  // Check for columns\\n  if (a % 3 === b % 3 && b % 3 === c % 3) {\\n    return 'column';\\n  }\\n  \\n  // Must be diagonal\\n  return 'diagonal';\\n};\\n\\nexport default {\\n  checkWinner,\\n  checkDraw,\\n  getWinningLine,\\n  makeMove,\\n  getAvailableMoves,\\n  switchPlayer,\\n  isValidMove,\\n  createNewGameState,\\n  updateGameState,\\n  getGameStatusMessage,\\n  isAITurn,\\n  getWinningPattern,\\n}; \",\"language\":\"typescript\",\"description\":\"Main content of core/game/logic.ts\",\"order\":0,\"file\":\"core/game/logic.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":220}}]},{\"path\":\"core/game/utils.ts\",\"name\":\"utils.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_4edac55c\",\"type\":\"code\",\"content\":\"// Game Utilities for Tic-Tac-Toe\\n\\nimport { GameStats, GameState, Player } from '@core/types';\\n\\n/**\\n * Local Storage Keys\\n */\\nconst STORAGE_KEYS = {\\n  GAME_STATS: 'tic-tac-toe-stats',\\n  GAME_STATE: 'tic-tac-toe-game-state',\\n  SETTINGS: 'tic-tac-toe-settings',\\n} as const;\\n\\n/**\\n * Save game statistics to local storage\\n * @param stats Game statistics to save\\n */\\nexport const saveGameStats = (stats: GameStats): void => {\\n  try {\\n    localStorage.setItem(STORAGE_KEYS.GAME_STATS, JSON.stringify(stats));\\n  } catch (error) {\\n    console.warn('Failed to save game stats:', error);\\n  }\\n};\\n\\n/**\\n * Load game statistics from local storage\\n * @returns Saved game statistics or default stats\\n */\\nexport const loadGameStats = (): GameStats => {\\n  try {\\n    const saved = localStorage.getItem(STORAGE_KEYS.GAME_STATS);\\n    if (saved) {\\n      const stats = JSON.parse(saved) as GameStats;\\n      // Recalculate win rate to ensure accuracy\\n      stats.winRate = stats.gamesPlayed > 0 ? (stats.wins / stats.gamesPlayed) * 100 : 0;\\n      return stats;\\n    }\\n  } catch (error) {\\n    console.warn('Failed to load game stats:', error);\\n  }\\n  \\n  return {\\n    gamesPlayed: 0,\\n    wins: 0,\\n    losses: 0,\\n    draws: 0,\\n    winRate: 0,\\n  };\\n};\\n\\n/**\\n * Update game statistics after a game ends\\n * @param currentStats Current statistics\\n * @param winner Winner of the game (null for draw)\\n * @param gameMode Game mode played\\n * @returns Updated statistics\\n */\\nexport const updateGameStats = (\\n  currentStats: GameStats,\\n  winner: Player | null,\\n  gameMode: 'ai' | 'player'\\n): GameStats => {\\n  const newStats = { ...currentStats };\\n  newStats.gamesPlayed += 1;\\n  \\n  if (winner === null) {\\n    newStats.draws += 1;\\n  } else if (winner === 'X') {\\n    newStats.wins += 1;\\n  } else {\\n    newStats.losses += 1;\\n  }\\n  \\n  newStats.winRate = (newStats.wins / newStats.gamesPlayed) * 100;\\n  \\n  saveGameStats(newStats);\\n  return newStats;\\n};\\n\\n/**\\n * Reset game statistics\\n * @returns Reset statistics\\n */\\nexport const resetGameStats = (): GameStats => {\\n  const resetStats: GameStats = {\\n    gamesPlayed: 0,\\n    wins: 0,\\n    losses: 0,\\n    draws: 0,\\n    winRate: 0,\\n  };\\n  \\n  saveGameStats(resetStats);\\n  return resetStats;\\n};\\n\\n/**\\n * Save game state to local storage\\n * @param gameState Game state to save\\n */\\nexport const saveGameState = (gameState: GameState): void => {\\n  try {\\n    localStorage.setItem(STORAGE_KEYS.GAME_STATE, JSON.stringify(gameState));\\n  } catch (error) {\\n    console.warn('Failed to save game state:', error);\\n  }\\n};\\n\\n/**\\n * Load game state from local storage\\n * @returns Saved game state or null\\n */\\nexport const loadGameState = (): GameState | null => {\\n  try {\\n    const saved = localStorage.getItem(STORAGE_KEYS.GAME_STATE);\\n    if (saved) {\\n      return JSON.parse(saved) as GameState;\\n    }\\n  } catch (error) {\\n    console.warn('Failed to load game state:', error);\\n  }\\n  \\n  return null;\\n};\\n\\n/**\\n * Clear saved game state\\n */\\nexport const clearSavedGameState = (): void => {\\n  try {\\n    localStorage.removeItem(STORAGE_KEYS.GAME_STATE);\\n  } catch (error) {\\n    console.warn('Failed to clear saved game state:', error);\\n  }\\n};\\n\\n/**\\n * Format game statistics for display\\n * @param stats Game statistics\\n * @returns Formatted statistics object\\n */\\nexport const formatGameStats = (stats: GameStats) => {\\n  return {\\n    gamesPlayed: stats.gamesPlayed.toString(),\\n    wins: stats.wins.toString(),\\n    losses: stats.losses.toString(),\\n    draws: stats.draws.toString(),\\n    winRate: stats.winRate.toFixed(1) + '%',\\n  };\\n};\\n\\n/**\\n * Get game result message\\n * @param winner Winner of the game\\n * @param gameMode Game mode\\n * @returns Result message\\n */\\nexport const getGameResultMessage = (\\n  winner: Player | null,\\n  gameMode: 'ai' | 'player'\\n): string => {\\n  if (winner === null) {\\n    return \\\"It's a draw! 🤝\\\";\\n  }\\n  \\n  if (gameMode === 'ai') {\\n    return winner === 'X' ? \\\"You won! 🎉\\\" : \\\"AI won! 🤖\\\";\\n  }\\n  \\n  return `Player ${winner} won! 🎉`;\\n};\\n\\n/**\\n * Get encouraging message based on game result\\n * @param winner Winner of the game\\n * @param gameMode Game mode\\n * @returns Encouraging message\\n */\\nexport const getEncouragingMessage = (\\n  winner: Player | null,\\n  gameMode: 'ai' | 'player'\\n): string => {\\n  if (winner === null) {\\n    return \\\"Great game! Both players played well.\\\";\\n  }\\n  \\n  if (gameMode === 'ai') {\\n    if (winner === 'X') {\\n      return \\\"Excellent strategy! You outplayed the AI.\\\";\\n    } else {\\n      return \\\"Don't give up! Try a different strategy next time.\\\";\\n    }\\n  }\\n  \\n  return `Congratulations Player ${winner}! Well played.`;\\n};\\n\\n/**\\n * Generate a random game tip\\n * @returns Random game tip\\n */\\nexport const getRandomGameTip = (): string => {\\n  const tips = [\\n    \\\"Try to control the center square - it's the most valuable position!\\\",\\n    \\\"Look for opportunities to create multiple winning threats at once.\\\",\\n    \\\"Block your opponent's winning moves before going for your own.\\\",\\n    \\\"Corners are strong positions - they're part of multiple winning lines.\\\",\\n    \\\"Watch out for fork opportunities where you can win in two ways.\\\",\\n    \\\"Don't just focus on offense - defense is just as important!\\\",\\n    \\\"The first player (X) has a slight advantage if they play optimally.\\\",\\n    \\\"Try to think one move ahead of your opponent.\\\",\\n  ];\\n  \\n  return tips[Math.floor(Math.random() * tips.length)];\\n};\\n\\n/**\\n * Check if local storage is available\\n * @returns True if local storage is available\\n */\\nexport const isLocalStorageAvailable = (): boolean => {\\n  try {\\n    const test = '__localStorage_test__';\\n    localStorage.setItem(test, 'test');\\n    localStorage.removeItem(test);\\n    return true;\\n  } catch {\\n    return false;\\n  }\\n};\\n\\n/**\\n * Debounce function to limit how often a function can be called\\n * @param func Function to debounce\\n * @param wait Wait time in milliseconds\\n * @returns Debounced function\\n */\\nexport const debounce = <T extends (...args: any[]) => any>(\\n  func: T,\\n  wait: number\\n): ((...args: Parameters<T>) => void) => {\\n  let timeout: number;\\n  \\n  return (...args: Parameters<T>) => {\\n    clearTimeout(timeout);\\n    timeout = setTimeout(() => func(...args), wait);\\n  };\\n};\\n\\n/**\\n * Format time duration in milliseconds to readable format\\n * @param ms Time in milliseconds\\n * @returns Formatted time string\\n */\\nexport const formatDuration = (ms: number): string => {\\n  const seconds = Math.floor(ms / 1000);\\n  const minutes = Math.floor(seconds / 60);\\n  \\n  if (minutes > 0) {\\n    return `${minutes}m ${seconds % 60}s`;\\n  }\\n  \\n  return `${seconds}s`;\\n};\\n\\n/**\\n * Create a delay promise\\n * @param ms Delay in milliseconds\\n * @returns Promise that resolves after the delay\\n */\\nexport const delay = (ms: number): Promise<void> => {\\n  return new Promise(resolve => setTimeout(resolve, ms));\\n};\\n\\nexport default {\\n  saveGameStats,\\n  loadGameStats,\\n  updateGameStats,\\n  resetGameStats,\\n  saveGameState,\\n  loadGameState,\\n  clearSavedGameState,\\n  formatGameStats,\\n  getGameResultMessage,\\n  getEncouragingMessage,\\n  getRandomGameTip,\\n  isLocalStorageAvailable,\\n  debounce,\\n  formatDuration,\\n  delay,\\n}; \",\"language\":\"typescript\",\"description\":\"Main content of core/game/utils.ts\",\"order\":0,\"file\":\"core/game/utils.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":292}}]},{\"path\":\"core/hooks/useGame.ts\",\"name\":\"useGame.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_1a974b73\",\"type\":\"code\",\"content\":\"// Custom Hook for Game State Management\\n\\nimport { useState, useEffect, useCallback } from 'react';\\nimport {\\n  GameState,\\n  GameMode,\\n  Player,\\n  INITIAL_GAME_STATE\\n} from '@core/types';\\n\\nimport {\\n  updateGameState,\\n  createNewGameState,\\n  isAITurn,\\n  getWinningLine\\n} from '@core/game/logic';\\n\\nimport { getAIMove } from '@core/game/ai';\\nimport {\\n  saveGameState,\\n  loadGameState,\\n  clearSavedGameState\\n} from '@core/game/utils';\\n\\nexport const useGame = () => {\\n  const [gameState, setGameState] = useState<GameState>(INITIAL_GAME_STATE);\\n  const [isAIThinking, setIsAIThinking] = useState(false);\\n\\n  // Load saved game state on mount\\n  useEffect(() => {\\n    const savedState = loadGameState();\\n    if (savedState && !savedState.isGameOver) {\\n      setGameState(savedState);\\n    }\\n  }, []);\\n\\n  // Save game state whenever it changes\\n  useEffect(() => {\\n    if (gameState.moveCount > 0) {\\n      saveGameState(gameState);\\n    }\\n  }, [gameState]);\\n\\n  // Handle AI moves\\n  useEffect(() => {\\n    const makeAIMove = async () => {\\n      if (isAITurn(gameState) && !isAIThinking) {\\n        setIsAIThinking(true);\\n        \\n        try {\\n          const aiMoveIndex = await getAIMove(gameState.board, 'O', 'hard', 800);\\n          \\n                     if (aiMoveIndex !== -1) {\\n             setGameState((prevState: GameState) => updateGameState(prevState, aiMoveIndex));\\n           }\\n        } catch (error) {\\n          console.error('AI move failed:', error);\\n        } finally {\\n          setIsAIThinking(false);\\n        }\\n      }\\n    };\\n\\n    makeAIMove();\\n  }, [gameState, isAIThinking]);\\n\\n  /**\\n   * Make a move at the specified index\\n   */\\n  const makeMove = useCallback((index: number) => {\\n    if (\\n      gameState.isGameOver ||\\n      gameState.board[index] !== null ||\\n      isAIThinking ||\\n      (gameState.gameMode === 'ai' && gameState.currentPlayer === 'O')\\n    ) {\\n      return;\\n    }\\n\\n         setGameState((prevState: GameState) => updateGameState(prevState, index));\\n  }, [gameState, isAIThinking]);\\n\\n  /**\\n   * Start a new game with the specified mode\\n   */\\n  const newGame = useCallback((mode: GameMode) => {\\n    clearSavedGameState();\\n    setGameState(createNewGameState(mode));\\n    setIsAIThinking(false);\\n  }, []);\\n\\n  /**\\n   * Reset the current game (keep same mode)\\n   */\\n  const resetGame = useCallback(() => {\\n    clearSavedGameState();\\n    setGameState((prevState: GameState) => createNewGameState(prevState.gameMode));\\n    setIsAIThinking(false);\\n  }, []);\\n\\n  /**\\n   * Set the game mode\\n   */\\n  const setGameMode = useCallback((mode: GameMode) => {\\n    setGameState((prevState: GameState) => ({\\n      ...prevState,\\n      gameMode: mode\\n    }));\\n  }, []);\\n\\n  /**\\n   * Go back to menu\\n   */\\n  const goToMenu = useCallback(() => {\\n    setGameMode('menu');\\n  }, [setGameMode]);\\n\\n  /**\\n   * Get the winning line for highlighting\\n   */\\n  const winningLine = getWinningLine(gameState.board);\\n\\n  return {\\n    gameState,\\n    isAIThinking,\\n    winningLine,\\n    makeMove,\\n    newGame,\\n    resetGame,\\n    setGameMode,\\n    goToMenu,\\n  };\\n};\\n\\nexport default useGame; \",\"language\":\"typescript\",\"description\":\"Main content of core/hooks/useGame.ts\",\"order\":0,\"file\":\"core/hooks/useGame.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":135}}]},{\"path\":\"core/hooks/useStats.ts\",\"name\":\"useStats.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_4d9a70d8\",\"type\":\"code\",\"content\":\"// Custom Hook for Game Statistics Management\\n\\nimport { useState, useEffect, useCallback } from 'react';\\nimport { GameStats, Player, GameMode } from '@core/types';\\n\\nimport {\\n  loadGameStats,\\n  updateGameStats as updateGameStatsUtil,\\n  resetGameStats as resetGameStatsUtil,\\n  formatGameStats\\n} from '@core/game/utils';\\n\\nexport const useStats = () => {\\n  const [stats, setStats] = useState<GameStats>(loadGameStats());\\n\\n  // Load stats on mount\\n  useEffect(() => {\\n    setStats(loadGameStats());\\n  }, []);\\n\\n  /**\\n   * Update statistics after a game ends\\n   */\\n  const updateStats = useCallback((winner: Player | null, gameMode: GameMode) => {\\n    if (gameMode === 'menu') return;\\n    \\n    setStats((prevStats: GameStats) => \\n      updateGameStatsUtil(prevStats, winner, gameMode as 'ai' | 'player')\\n    );\\n  }, []);\\n\\n  /**\\n   * Reset all statistics\\n   */\\n  const resetStats = useCallback(() => {\\n    const newStats = resetGameStatsUtil();\\n    setStats(newStats);\\n  }, []);\\n\\n  /**\\n   * Get formatted statistics for display\\n   */\\n  const formattedStats = formatGameStats(stats);\\n\\n  return {\\n    stats,\\n    formattedStats,\\n    updateStats,\\n    resetStats,\\n  };\\n};\\n\\nexport default useStats; \",\"language\":\"typescript\",\"description\":\"Main content of core/hooks/useStats.ts\",\"order\":0,\"file\":\"core/hooks/useStats.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":53}}]}],\"created\":\"2025-07-06T04:38:07.196Z\"},\"my-project\":{\"name\":\"my-project\",\"description\":\"\",\"files\":[{\"path\":\"my-project/src/index.ts\",\"name\":\"index.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_1e6678b2\",\"type\":\"code\",\"content\":\"---\\nid: 4cbf219d-4cbf-4cbf-4cbf-4cbf219d\\npath: my-project/src/index.ts\\nlevel: file\\ntitle: Index\\ndescription: TypeScript module - Auto-generated\\n---\\nMain source file\",\"language\":\"typescript\",\"description\":\"Main content of my-project/src/index.ts\",\"order\":0,\"file\":\"my-project/src/index.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":8}}]},{\"path\":\"my-project/src/types.ts\",\"name\":\"types.ts\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_4c4ef766\",\"type\":\"code\",\"content\":\"---\\nid: 1dc87c96-1dc8-1dc8-1dc8-1dc87c96\\npath: my-project/src/types.ts\\nlevel: file\\ntitle: Types\\ndescription: TypeScript module - Auto-generated\\n---\\nexport interface User {}\",\"language\":\"typescript\",\"description\":\"Main content of my-project/src/types.ts\",\"order\":0,\"file\":\"my-project/src/types.ts\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":8}}]}],\"created\":\"2025-07-06T04:38:07.202Z\"},\"my-react-app\":{\"name\":\"my-react-app\",\"description\":\"\",\"files\":[{\"path\":\"my-react-app/package.json\",\"name\":\"package.json\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_60cc1826\",\"type\":\"code\",\"content\":\"---\\nid: 3225a173-3225-3225-3225-3225a173\\npath: my-react-app/package.json\\nlevel: module\\ntitle: Package\\ndescription: Configuration file - Auto-generated\\n---\\n{\\\"name\\\": \\\"my-react-app\\\"}\",\"language\":\"json\",\"description\":\"Main content of my-react-app/package.json\",\"order\":0,\"file\":\"my-react-app/package.json\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":8}}]},{\"path\":\"my-react-app/public/index.html\",\"name\":\"index.html\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_e0af0e7c\",\"type\":\"code\",\"content\":\"---\\nid: 3e601c30-3e60-3e60-3e60-3e601c30\\npath: my-react-app/public/index.html\\nlevel: file\\ntitle: Index\\ndescription: Source file - Auto-generated\\n---\\n<!DOCTYPE html>\",\"language\":\"html\",\"description\":\"Main content of my-react-app/public/index.html\",\"order\":0,\"file\":\"my-react-app/public/index.html\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":8}}]},{\"path\":\"my-react-app/src/App.js\",\"name\":\"App.js\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_237c7436\",\"type\":\"code\",\"content\":\"---\\nid: 194d331e-194d-194d-194d-194d331e\\npath: my-react-app/src/App.js\\nlevel: file\\ntitle: App\\ndescription: JavaScript module - Auto-generated\\n---\\nimport React from \\\"react\\\";\",\"language\":\"javascript\",\"description\":\"Main content of my-react-app/src/App.js\",\"order\":0,\"file\":\"my-react-app/src/App.js\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":8}}]},{\"path\":\"my-react-app/src/index.js\",\"name\":\"index.js\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_3c18223b\",\"type\":\"code\",\"content\":\"---\\nid: 453e4353-453e-453e-453e-453e4353\\npath: my-react-app/src/index.js\\nlevel: file\\ntitle: Index\\ndescription: JavaScript module - Auto-generated\\n---\\nimport App from \\\"./App\\\";\",\"language\":\"javascript\",\"description\":\"Main content of my-react-app/src/index.js\",\"order\":0,\"file\":\"my-react-app/src/index.js\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":8}}]}],\"created\":\"2025-07-06T04:38:07.204Z\"},\"public\":{\"name\":\"public\",\"description\":\"\",\"files\":[{\"path\":\"public/index.html\",\"name\":\"index.html\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_3ba64a82\",\"type\":\"code\",\"content\":\"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <link rel=\\\"icon\\\" href=\\\"%PUBLIC_URL%/favicon.ico\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n    <meta name=\\\"theme-color\\\" content=\\\"#000000\\\" />\\n    <meta\\n      name=\\\"description\\\"\\n      content=\\\"Online multiplayer tic-tac-toe game built with React and TypeScript. Play against friends or challenge the AI!\\\"\\n    />\\n    <link rel=\\\"apple-touch-icon\\\" href=\\\"%PUBLIC_URL%/logo192.png\\\" />\\n    <link rel=\\\"manifest\\\" href=\\\"%PUBLIC_URL%/manifest.json\\\" />\\n    \\n    <!-- Google Fonts -->\\n    <link rel=\\\"preconnect\\\" href=\\\"https://fonts.googleapis.com\\\">\\n    <link rel=\\\"preconnect\\\" href=\\\"https://fonts.gstatic.com\\\" crossorigin>\\n    <link href=\\\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\\\" rel=\\\"stylesheet\\\">\\n    \\n    <title>Tic-Tac-Toe Online</title>\\n    \\n    <style>\\n      /* Loading styles */\\n      .loading-container {\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        min-height: 100vh;\\n        font-family: 'Inter', sans-serif;\\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\\n        color: white;\\n      }\\n      \\n      .loading-spinner {\\n        width: 40px;\\n        height: 40px;\\n        border: 4px solid rgba(255, 255, 255, 0.3);\\n        border-radius: 50%;\\n        border-top-color: white;\\n        animation: spin 1s ease-in-out infinite;\\n      }\\n      \\n      @keyframes spin {\\n        to { transform: rotate(360deg); }\\n      }\\n      \\n      .loading-text {\\n        margin-left: 16px;\\n        font-size: 18px;\\n        font-weight: 500;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <noscript>You need to enable JavaScript to run this app.</noscript>\\n    <div id=\\\"root\\\">\\n      <!-- Loading placeholder -->\\n      <div class=\\\"loading-container\\\">\\n        <div class=\\\"loading-spinner\\\"></div>\\n        <div class=\\\"loading-text\\\">Loading Tic-Tac-Toe...</div>\\n      </div>\\n    </div>\\n  </body>\\n</html> \",\"language\":\"html\",\"description\":\"Main content of public/index.html\",\"order\":0,\"file\":\"public/index.html\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":64}}]}],\"created\":\"2025-07-06T04:38:07.206Z\"},\"src\":{\"name\":\"src\",\"description\":\"\",\"files\":[{\"path\":\"src/App.css\",\"name\":\"App.css\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_247a7157\",\"type\":\"code\",\"content\":\"/* Main App Styles */\\n\\n* {\\n  box-sizing: border-box;\\n  margin: 0;\\n  padding: 0;\\n}\\n\\nbody {\\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\\n    sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\\n  min-height: 100vh;\\n  color: #333;\\n}\\n\\n.App {\\n  min-height: 100vh;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  padding: 20px;\\n}\\n\\n/* Responsive design */\\n@media (max-width: 768px) {\\n  .App {\\n    padding: 10px;\\n  }\\n}\\n\\n/* Animation utilities */\\n@keyframes fadeIn {\\n  from {\\n    opacity: 0;\\n    transform: translateY(20px);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: translateY(0);\\n  }\\n}\\n\\n@keyframes slideIn {\\n  from {\\n    opacity: 0;\\n    transform: translateX(-20px);\\n  }\\n  to {\\n    opacity: 1;\\n    transform: translateX(0);\\n  }\\n}\\n\\n@keyframes bounce {\\n  0%, 20%, 60%, 100% {\\n    transform: translateY(0);\\n  }\\n  40% {\\n    transform: translateY(-10px);\\n  }\\n  80% {\\n    transform: translateY(-5px);\\n  }\\n}\\n\\n@keyframes pulse {\\n  0% {\\n    transform: scale(1);\\n  }\\n  50% {\\n    transform: scale(1.05);\\n  }\\n  100% {\\n    transform: scale(1);\\n  }\\n}\\n\\n/* Utility classes */\\n.fade-in {\\n  animation: fadeIn 0.5s ease-out forwards;\\n}\\n\\n.slide-in {\\n  animation: slideIn 0.3s ease-out forwards;\\n}\\n\\n.bounce {\\n  animation: bounce 0.6s ease-out forwards;\\n}\\n\\n.pulse {\\n  animation: pulse 0.3s ease-out forwards;\\n}\\n\\n/* Loading states */\\n.loading {\\n  opacity: 0.7;\\n  pointer-events: none;\\n}\\n\\n/* Focus styles for accessibility */\\n*:focus {\\n  outline: 2px solid #667eea;\\n  outline-offset: 2px;\\n}\\n\\n/* Scrollbar styles */\\n::-webkit-scrollbar {\\n  width: 8px;\\n}\\n\\n::-webkit-scrollbar-track {\\n  background: rgba(255, 255, 255, 0.1);\\n  border-radius: 4px;\\n}\\n\\n::-webkit-scrollbar-thumb {\\n  background: rgba(255, 255, 255, 0.3);\\n  border-radius: 4px;\\n}\\n\\n::-webkit-scrollbar-thumb:hover {\\n  background: rgba(255, 255, 255, 0.5);\\n} \",\"language\":\"css\",\"description\":\"Main content of src/App.css\",\"order\":0,\"file\":\"src/App.css\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":128}}]},{\"path\":\"src/App.tsx\",\"name\":\"App.tsx\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_a97469aa\",\"type\":\"code\",\"content\":\"import React from 'react';\\nimport './App.css';\\nimport TicTacToeGame from './components/TicTacToeGame';\\n\\nconst App: React.FC = () => {\\n  return (\\n    <div className=\\\"App\\\">\\n      <TicTacToeGame />\\n    </div>\\n  );\\n};\\n\\nexport default App; \",\"language\":\"tsx\",\"description\":\"Main content of src/App.tsx\",\"order\":0,\"file\":\"src/App.tsx\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":13}}]}],\"created\":\"2025-07-06T04:38:07.207Z\"},\"ui\":{\"name\":\"ui\",\"description\":\"\",\"files\":[{\"path\":\"ui/components/buttons/IconButton (1) (1).tsx\",\"name\":\"IconButton (1) (1).tsx\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_4dd0f010\",\"type\":\"code\",\"content\":\"---\\nid: 0cfec682-0cfe-0cfe-0cfe-0cfec682\\npath: ui/components/buttons/IconButton (1) (1).tsx\\nlevel: file\\ntitle: IconButton (1) (1)\\ndescription: React TypeScript component - Auto-generated\\n---\\n# Moved file\",\"language\":\"tsx\",\"description\":\"Main content of ui/components/buttons/IconButton (1) (1).tsx\",\"order\":0,\"file\":\"ui/components/buttons/IconButton (1) (1).tsx\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":8}}]},{\"path\":\"ui/components/buttons/IconButton (1).tsx\",\"name\":\"IconButton (1).tsx\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_afc8722c\",\"type\":\"code\",\"content\":\"---\\nid: 438301e2-4383-4383-4383-438301e2\\npath: ui/components/buttons/IconButton (1).tsx\\nlevel: file\\ntitle: IconButton (1)\\ndescription: React TypeScript component - Auto-generated\\n---\\n# Moved file\",\"language\":\"tsx\",\"description\":\"Main content of ui/components/buttons/IconButton (1).tsx\",\"order\":0,\"file\":\"ui/components/buttons/IconButton (1).tsx\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":8}}]}],\"created\":\"2025-07-06T04:38:07.209Z\"},\"root\":{\"name\":\"root\",\"description\":\"# Tic-Tac-Toe Online\",\"files\":[{\"path\":\"README.md\",\"name\":\"README.md\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_0067ff61\",\"type\":\"code\",\"content\":\"# Tic-Tac-Toe Online\\n\\n<<<<<<< HEAD\\nA modern, interactive online tic-tac-toe game built with React and TypeScript. Play against friends or challenge the AI in this beautifully designed web application.\\n\\n## Features\\n\\n- 🎮 **Interactive Gameplay**: Smooth, responsive tic-tac-toe game interface\\n- 🤖 **AI Opponent**: Play against an intelligent computer opponent\\n- 👥 **Two Player Mode**: Play with friends on the same device\\n- 🎨 **Modern UI**: Clean, responsive design with smooth animations\\n- 📱 **Mobile Friendly**: Optimized for both desktop and mobile devices\\n- 🔄 **Game Statistics**: Track your wins, losses, and draws\\n- ⚡ **Real-time Updates**: Instant game state updates\\n\\n## How to Play\\n\\n1. Choose your game mode (vs AI or vs Player)\\n2. Players take turns placing X's and O's on the 3x3 grid\\n3. First player to get 3 in a row (horizontally, vertically, or diagonally) wins!\\n4. If all squares are filled with no winner, it's a draw\\n\\n## Game Rules\\n\\n- X always goes first\\n- Players alternate turns\\n- A player wins by placing three marks in a row:\\n  - Horizontally (across)\\n  - Vertically (up and down)\\n  - Diagonally (corner to corner)\\n- The game ends when someone wins or all squares are filled\\n\\n## Getting Started\\n\\n### Prerequisites\\n\\n- Node.js (version 16 or higher)\\n- npm or yarn\\n\\n### Installation\\n\\n1. Clone the repository:\\n```bash\\ngit clone <repository-url>\\ncd tic-tac-toe-online\\n```\\n\\n2. Install dependencies:\\n```bash\\nnpm install\\n```\\n\\n3. Start the development server:\\n```bash\\nnpm start\\n```\\n\\n4. Open your browser and navigate to `http://localhost:3000`\\n\\n## Project Structure\\n\\n```\\ntic-tac-toe-online/\\n├── README.md\\n├── package.json\\n├── tsconfig.json\\n├── public/\\n│   └── index.html\\n├── core/\\n│   ├── types.ts          # Game types and interfaces\\n│   ├── game/\\n│   │   ├── logic.ts      # Game logic and rules\\n│   │   ├── ai.ts         # AI opponent logic\\n│   │   └── utils.ts      # Game utilities\\n│   └── hooks/\\n│       ├── useGame.ts    # Game state management\\n│       └── useStats.ts   # Statistics tracking\\n└── ui/\\n    ├── components/\\n    │   ├── Game/\\n    │   │   ├── Board.tsx\\n    │   │   ├── Square.tsx\\n    │   │   └── GameInfo.tsx\\n    │   ├── Menu/\\n    │   │   ├── GameMenu.tsx\\n    │   │   └── ModeSelector.tsx\\n    │   └── common/\\n    │       ├── Button.tsx\\n    │       └── Card.tsx\\n    ├── styles/\\n    │   ├── globals.css\\n    │   └── components.css\\n    └── App.tsx\\n```\\n\\n## Technologies Used\\n\\n- **React 18** - Frontend framework\\n- **TypeScript** - Type safety and better development experience\\n- **Emotion** - CSS-in-JS styling\\n- **React Router** - Navigation and routing\\n- **Modern CSS** - Responsive design and animations\\n\\n## Available Scripts\\n\\n- `npm start` - Runs the app in development mode\\n- `npm build` - Builds the app for production\\n- `npm test` - Launches the test runner\\n- `npm run lint` - Runs ESLint to check code quality\\n- `npm run format` - Formats code using Prettier\\n\\n## Contributing\\n\\n1. Fork the repository\\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\\n4. Push to the branch (`git push origin feature/amazing-feature`)\\n5. Open a Pull Request\\n\\n## License\\n\\nThis project is open source and available under the [MIT License](LICENSE).\\n\\n## Acknowledgments\\n\\n- Inspired by the classic tic-tac-toe game\\n- Built with modern web technologies for the best user experience\\n=======\\n-  L OT OF TEXT WAS DELETED OOPSY\\n- seeing if it do beetter now\\n- test edit again'\\n\\n- 505pm test\\n505\\n725725\\n8\\n850\\n911\\n911\\n950gdfg\\n11\\ndfh\\njkhs\\nblobby\\n>>>>>>> 9228db559405d0bcf1ff3e8daf4b4a36c5f738af\\n\",\"language\":\"markdown\",\"description\":\"Main content of README.md\",\"order\":0,\"file\":\"README.md\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":146}}]},{\"path\":\"narrative-structure.json\",\"name\":\"narrative-structure.json\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_2544425b\",\"type\":\"code\",\"content\":\"{\\n  \\\"id\\\": \\\"test\\\",\\n  \\\"content\\\": \\\"TESTING SAVE\\\"\\n}\\n85\",\"language\":\"json\",\"description\":\"Main content of narrative-structure.json\",\"order\":0,\"file\":\"narrative-structure.json\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":5}}]},{\"path\":\"narrative.json\",\"name\":\"narrative.json\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_38b3b4b7\",\"type\":\"code\",\"content\":\"{\\\"narrative\\\":{\\\"test\\\":\\\"data\\\"},\\\"timestamp\\\":\\\"2025-07-06T17:54:36.302Z\\\",\\\"commitId\\\":\\\"debug-test-1751824476302\\\"}\",\"language\":\"json\",\"description\":\"Main content of narrative.json\",\"order\":0,\"file\":\"narrative.json\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":1}}]},{\"path\":\"package.json\",\"name\":\"package.json\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_76f7ce20\",\"type\":\"code\",\"content\":\"{\\n  \\\"name\\\": \\\"tic-tac-toe-online\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"Online multiplayer tic-tac-toe game built with React and TypeScript\\\",\\n  \\\"private\\\": true,\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\",\\n    \\\"lint\\\": \\\"eslint src --ext .ts,.tsx\\\",\\n    \\\"format\\\": \\\"prettier --write \\\\\\\"**/*.{ts,tsx,json,md}\\\\\\\"\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"@emotion/react\\\": \\\"^11.11.0\\\",\\n    \\\"@emotion/styled\\\": \\\"^11.11.0\\\",\\n    \\\"react\\\": \\\"^18.2.0\\\",\\n    \\\"react-dom\\\": \\\"^18.2.0\\\",\\n    \\\"react-router-dom\\\": \\\"^6.11.0\\\",\\n    \\\"typescript\\\": \\\"^4.9.5\\\",\\n    \\\"socket.io-client\\\": \\\"^4.7.0\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/node\\\": \\\"^16.18.0\\\",\\n    \\\"@types/react\\\": \\\"^18.2.0\\\",\\n    \\\"@types/react-dom\\\": \\\"^18.2.0\\\",\\n    \\\"@typescript-eslint/eslint-plugin\\\": \\\"^5.59.0\\\",\\n    \\\"@typescript-eslint/parser\\\": \\\"^5.59.0\\\",\\n    \\\"eslint\\\": \\\"^8.39.0\\\",\\n    \\\"eslint-plugin-react\\\": \\\"^7.32.0\\\",\\n    \\\"prettier\\\": \\\"^2.8.0\\\",\\n    \\\"react-scripts\\\": \\\"5.0.1\\\"\\n  }\\n} \",\"language\":\"json\",\"description\":\"Main content of package.json\",\"order\":0,\"file\":\"package.json\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":34}}]},{\"path\":\"tsconfig.json\",\"name\":\"tsconfig.json\",\"description\":\"\",\"codeBlocks\":[{\"id\":\"block_e2d8dba0\",\"type\":\"code\",\"content\":\"{\\n  // #region Compiler Options\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"es2020\\\",\\n    \\\"lib\\\": [\\\"dom\\\", \\\"dom.iterable\\\", \\\"esnext\\\"],\\n    \\\"allowJs\\\": true,\\n    \\\"skipLibCheck\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    \\\"allowSyntheticDefaultImports\\\": true,\\n    \\\"strict\\\": true,\\n    \\\"forceConsistentCasingInFileNames\\\": true,\\n    \\\"noFallthroughCasesInSwitch\\\": true,\\n    \\\"module\\\": \\\"esnext\\\",\\n    \\\"moduleResolution\\\": \\\"node\\\",\\n    \\\"resolveJsonModule\\\": true,\\n    \\\"isolatedModules\\\": true,\\n    \\\"noEmit\\\": true,\\n    \\\"jsx\\\": \\\"react-jsx\\\",\\n    \\\"baseUrl\\\": \\\".\\\",\\n    \\\"paths\\\": {\\n      \\\"@core/*\\\": [\\\"core/*\\\"],\\n      \\\"@ui/*\\\": [\\\"ui/*\\\"]\\n    }\\n  },\\n  // #endregion\\n\\n  // #region Project Structure\\n  \\\"include\\\": [\\n    \\\"core/**/*\\\",\\n    \\\"ui/**/*\\\",\\n    \\\"src/**/*\\\",\\n    \\\"public/index.html\\\"\\n  ],\\n  \\\"exclude\\\": [\\n    \\\"node_modules\\\",\\n    \\\"build\\\",\\n    \\\"dist\\\",\\n    \\\"**/*.spec.ts\\\",\\n    \\\"**/*.test.ts\\\"\\n  ]\\n  // #endregion\\n} \",\"language\":\"json\",\"description\":\"Main content of tsconfig.json\",\"order\":0,\"file\":\"tsconfig.json\",\"meta\":{\"segmentType\":\"other\",\"startLine\":1,\"endLine\":42}}]}],\"created\":\"2025-07-06T04:38:07.210Z\"}}},\"timestamp\":\"2025-07-06T17:55:14.812Z\",\"commitId\":\"debug-save-1751824514331\"}",
              "language": "json",
              "description": "Main content of narrative.json",
              "order": 0,
              "file": "narrative.json",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 1
              }
            }
          ]
        },
        {
          "path": "package.json",
          "name": "package.json",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_921201f7",
              "type": "code",
              "content": "{\n  \"name\": \"tic-tac-toe-online\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Online multiplayer tic-tac-toe game built with React and TypeScript\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\",\n    \"lint\": \"eslint src --ext .ts,.tsx\",\n    \"format\": \"prettier --write \\\"**/*.{ts,tsx,json,md}\\\"\"\n  },\n  \"dependencies\": {\n    \"@emotion/react\": \"^11.11.0\",\n    \"@emotion/styled\": \"^11.11.0\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-router-dom\": \"^6.11.0\",\n    \"typescript\": \"^4.9.5\",\n    \"socket.io-client\": \"^4.7.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^16.18.0\",\n    \"@types/react\": \"^18.2.0\",\n    \"@types/react-dom\": \"^18.2.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.59.0\",\n    \"@typescript-eslint/parser\": \"^5.59.0\",\n    \"eslint\": \"^8.39.0\",\n    \"eslint-plugin-react\": \"^7.32.0\",\n    \"prettier\": \"^2.8.0\",\n    \"react-scripts\": \"5.0.1\"\n  }\n} ",
              "language": "json",
              "description": "Main content of package.json",
              "order": 0,
              "file": "package.json",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 34
              }
            }
          ]
        },
        {
          "path": "tsconfig.json",
          "name": "tsconfig.json",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_e3e1e5ad",
              "type": "code",
              "content": "{\n  // #region Compiler Options\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@core/*\": [\"core/*\"],\n      \"@ui/*\": [\"ui/*\"]\n    }\n  },\n  // #endregion\n\n  // #region Project Structure\n  \"include\": [\n    \"core/**/*\",\n    \"ui/**/*\",\n    \"src/**/*\",\n    \"public/index.html\"\n  ],\n  \"exclude\": [\n    \"node_modules\",\n    \"build\",\n    \"dist\",\n    \"**/*.spec.ts\",\n    \"**/*.test.ts\"\n  ]\n  // #endregion\n} ",
              "language": "json",
              "description": "Main content of tsconfig.json",
              "order": 0,
              "file": "tsconfig.json",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 42
              }
            }
          ]
        },
        {
          "path": "vision.md",
          "name": "vision.md",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_b00a0394",
              "type": "code",
              "content": "# vibe-creation-test - Vision\n\n## Project Vision\n\nThis document outlines the vision and long-term goals for the vibe-creation-test project.\n\n## Mission Statement\n\n<!-- Define the core mission of this project -->\n\n## Goals\n\n### Short-term Goals\n- [ ] <!-- Define immediate objectives -->\n- [ ] <!-- Define next steps -->\n\n### Long-term Goals\n- [ ] <!-- Define future aspirations -->\n- [ ] <!-- Define scalability targets -->\n\n## Success Metrics\n\n<!-- Define how success will be measured -->\n\n## Stakeholders\n\n<!-- Identify key stakeholders and their roles -->\n\n## Vision Statement\n\n<!-- Write a compelling vision statement that captures the essence of what this project aims to achieve -->\n\n---\n\n*This document was automatically generated on 2025-07-10*\n*Please customize it to reflect your project's specific vision and goals.*\n",
              "language": "markdown",
              "description": "Main content of vision.md",
              "order": 0,
              "file": "vision.md",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 37
              }
            }
          ]
        }
      ],
      "modules": {},
      "created": "2025-07-16T04:23:50.415Z"
    },
    "core": {
      "name": "core",
      "description": "test",
      "files": [
        {
          "path": "core/test.py",
          "name": "test.py",
          "description": "test",
          "codeBlocks": [
            {
              "id": "block_abf70d9c",
              "type": "code",
              "content": "// Modified at 2025-07-06T21:40:31.088Z\n# TIMING TEST - 2025-07-06T21:25:07.164Z\n# This should appear in GitHub immediately\n# No more lag!\n# post debug test\n# twst",
              "language": "python",
              "description": "test",
              "order": 0,
              "file": "core/test.py",
              "meta": {
                "segmentType": "comment",
                "startLine": 1,
                "endLine": 6
              }
            },
            {
              "id": "block_6f3220dd",
              "type": "code",
              "content": "# test block",
              "language": "python",
              "description": "block 2 description...test",
              "order": 1,
              "file": "core/test.py",
              "meta": {
                "segmentType": "comment",
                "startLine": 9,
                "endLine": 9
              }
            }
          ]
        },
        {
          "path": "core/types.ts",
          "name": "types.ts",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_14ae72f7",
              "type": "code",
              "content": "export interface UserProfile {\n  firstName: string;\n  lastName: string;\n  avatar?: string;\n  bio?: string;\n  location?: string;\n  socialLinks?: {\n    twitter?: string;\n    github?: string;\n    linkedin?: string;\n  };\n}",
              "language": "typescript",
              "description": "Import statements (block 1)",
              "order": 0,
              "file": "core/types.ts",
              "meta": {
                "segmentType": "import",
                "startLine": 1,
                "endLine": 12
              }
            },
            {
              "id": "block_8883b171",
              "type": "code",
              "content": "<<<<<<< HEAD\nexport type UserRole = 'admin' | 'user' | 'moderator';\n// #endregion\n\n// #region Authentication Types\nexport interface AuthState {\n  isAuthenticated: boolean;\n  user: User | null;\n  token: string | null;\n  loading: boolean;\n  error: string | null;\n}",
              "language": "typescript",
              "description": "Code block 2",
              "order": 1,
              "file": "core/types.ts",
              "meta": {
                "segmentType": "other",
                "startLine": 15,
                "endLine": 26
              }
            },
            {
              "id": "block_9e728f4f",
              "type": "code",
              "content": "export interface LoginCredentials {\n  username: string;\n  password: string;\n  remember?: boolean;\n}\n\nexport interface RegistrationData extends LoginCredentials {\n  email: string;\n  confirmPassword: string;\n}\n// #endregion\n\n// #region API Types\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: {\n    code: string;\n    message: string;\n    details?: unknown;\n  };\n}\n\nexport interface PaginatedResponse<T> extends ApiResponse<T[]> {\n  pagination: {\n    total: number;\n    page: number;\n    pageSize: number;\n    totalPages: number;\n  };\n}\n// #endregion\n\n// Game Types and Interfaces for Tic-Tac-Toe\n\nexport type Player = 'X' | 'O';\nexport type CellValue = Player | null;\nexport type Board = CellValue[];\n\nexport interface GameState {\n  board: Board;\n  currentPlayer: Player;\n  winner: Player | null;\n  isDraw: boolean;\n  isGameOver: boolean;\n  gameMode: GameMode;\n  moveCount: number;\n}\n\nexport type GameMode = 'ai' | 'player' | 'menu';\n\nexport interface GameStats {\n  gamesPlayed: number;\n  wins: number;\n  losses: number;\n  draws: number;\n  winRate: number;\n}\n\nexport interface Move {\n  index: number;\n  player: Player;\n}\n\nexport interface GameConfig {\n  aiDifficulty: 'easy' | 'medium' | 'hard';\n  firstPlayer: Player;\n}\n\nexport interface WinningLine {\n  indices: number[];\n  pattern: 'row' | 'column' | 'diagonal';\n}\n\n// AI Types\nexport interface AIMove {\n  index: number;\n  score: number;\n}\n\nexport interface GameContextType {\n  gameState: GameState;\n  stats: GameStats;\n  makeMove: (index: number) => void;\n  resetGame: () => void;\n  setGameMode: (mode: GameMode) => void;\n  newGame: (mode: GameMode) => void;\n}\n\n// UI Component Props\nexport interface SquareProps {\n  value: CellValue;\n  onClick: () => void;\n  isWinning?: boolean;\n  disabled?: boolean;\n}\n\nexport interface BoardProps {\n  board: Board;\n  onSquareClick: (index: number) => void;\n  winningLine?: number[];\n  disabled?: boolean;\n}\n\nexport interface GameInfoProps {\n  currentPlayer: Player;\n  winner: Player | null;\n  isDraw: boolean;\n  gameMode: GameMode;\n  moveCount: number;\n}\n\nexport interface GameMenuProps {\n  onModeSelect: (mode: GameMode) => void;\n  stats: GameStats;\n}\n\nexport interface StatsDisplayProps {\n  stats: GameStats;\n}\n\n// Constants\nexport const INITIAL_BOARD: Board = Array(9).fill(null);\n\nexport const WINNING_COMBINATIONS: number[][] = [\n  [0, 1, 2], // top row\n  [3, 4, 5], // middle row\n  [6, 7, 8], // bottom row\n  [0, 3, 6], // left column\n  [1, 4, 7], // middle column\n  [2, 5, 8], // right column\n  [0, 4, 8], // diagonal top-left to bottom-right\n  [2, 4, 6], // diagonal top-right to bottom-left\n];\n\nexport const INITIAL_GAME_STATE: GameState = {\n  board: INITIAL_BOARD,\n  currentPlayer: 'X',\n  winner: null,\n  isDraw: false,\n  isGameOver: false,\n  gameMode: 'menu',\n  moveCount: 0,\n};\n\nexport const INITIAL_STATS: GameStats = {\n  gamesPlayed: 0,\n  wins: 0,\n  losses: 0,\n  draws: 0,\n  winRate: 0,\n}; \n=======\n85\n>>>>>>> 9228db559405d0bcf1ff3e8daf4b4a36c5f738af",
              "language": "typescript",
              "description": "Import statements (block 3)",
              "order": 2,
              "file": "core/types.ts",
              "meta": {
                "segmentType": "import",
                "startLine": 29,
                "endLine": 183
              }
            }
          ]
        }
      ],
      "modules": {
        "auth": {
          "name": "auth",
          "description": "",
          "files": [
            {
              "path": "core/auth/login.ts",
              "name": "login.ts",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_c4f9d9fa",
                  "type": "code",
                  "content": "// Type definitions for authentication\ninterface Credentials {\n  username: string;\n  password: string;\n}\n\n//MY FIRST EDIT\ninterface AuthResponse {\n  token: string;\n  user: User;\n}\n\n//good here\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  roles: string[];\n}\n\n//725\n//next day\n//438",
                  "language": "typescript",
                  "description": "Main content of core/auth/login.ts",
                  "order": 0,
                  "file": "core/auth/login.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 23
                  }
                }
              ]
            },
            {
              "path": "core/auth/session.ts",
              "name": "session.ts",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_c00c88f7",
                  "type": "code",
                  "content": "const USER_KEY = 'user_data';\n//85\n\nexport function saveSession(token: string, user: any): void {\n  localStorage.setItem(TOKEN_KEY, token);\n  localStorage.setItem(USER_KEY, JSON.stringify(user));\n}\n//good ehre\n\nexport function clearSession(): void {\n  localStorage.removeItem(TOKEN_KEY);\n  localStorage.removeItem(USER_KEY);\n}\n//8\n\nconst TOKEN_KEY = 'auth_token';",
                  "language": "typescript",
                  "description": "Main content of core/auth/session.ts",
                  "order": 0,
                  "file": "core/auth/session.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 16
                  }
                }
              ]
            }
          ],
          "modules": {
            "providers": {
              "name": "providers",
              "description": "",
              "files": [
                {
                  "path": "core/auth/providers/oauth.ts",
                  "name": "oauth.ts",
                  "description": "",
                  "codeBlocks": [
                    {
                      "id": "block_502e68d1",
                      "type": "code",
                      "content": "new shit to dow 911\n950\n\nfanskldfnsadl;kfn;;sal",
                      "language": "typescript",
                      "description": "Main content of core/auth/providers/oauth.ts",
                      "order": 0,
                      "file": "core/auth/providers/oauth.ts",
                      "meta": {
                        "segmentType": "other",
                        "startLine": 1,
                        "endLine": 4
                      }
                    }
                  ]
                }
              ],
              "modules": {},
              "created": "2025-07-16T04:23:50.449Z"
            }
          },
          "created": "2025-07-16T04:23:50.447Z"
        },
        "game": {
          "name": "game",
          "description": "",
          "files": [
            {
              "path": "core/game/ai.ts",
              "name": "ai.ts",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_cbbdc776",
                  "type": "code",
                  "content": "---\nid: 2b5baa18-2b5b-2b5b-2b5b-2b5baa18\npath: core/game/ai.ts\nlevel: file\ntitle: \"Ai\"\ndescription: \"TypeScript module\"\n---",
                  "language": "typescript",
                  "description": "Code block 1",
                  "order": 0,
                  "file": "core/game/ai.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 7
                  }
                },
                {
                  "id": "block_3eab100c",
                  "type": "code",
                  "content": "* Evaluate the current board position\n * @param board Current board state\n * @param aiPlayer AI player symbol\n * @returns Score evaluation\n */\n//test\nexport const evaluateBoard = (board: Board, aiPlayer: Player): number => {\n  const humanPlayer = aiPlayer === 'X' ? 'O' : 'X';\n  const winner = checkWinner(board);\n  \n  if (winner === aiPlayer) return 10;\n  if (winner === humanPlayer) return -10;\n  if (checkDraw(board)) return 0;\n  \n  // Evaluate position based on potential winning lines\n  let score = 0;\n  const combinations = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows\n    [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns\n    [0, 4, 8], [2, 4, 6] // diagona",
                  "language": "typescript",
                  "description": "Code block 2",
                  "order": 1,
                  "file": "core/game/ai.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 10,
                    "endLine": 29
                  }
                }
              ]
            },
            {
              "path": "core/game/logic.ts",
              "name": "logic.ts",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_5bf0232e",
                  "type": "code",
                  "content": "---\nid: 4b3401e4-4b34-4b34-4b34-4b3401e4\npath: core/game/logic.ts\nlevel: file\ntitle: \"Logic\"\ndescription: \"TypeScript module\"\n---\n//test\n// Core Game Logic for Tic-Tac-Toe\n\nimport {\n  Board,\n  Player,\n  GameState,\n  CellValue,\n  WINNING_COMBINATIONS,\n  INITIAL_BOARD,\n  Move,\n  WinningLine\n} from '@core/types';\n\n/**\n * Check if there's a winner on the board\n * @param board Current board state\n * @returns Winner player or null if no winner\n */\nexport const checkWinner = (board: Board): Player | null => {\n  for (const combination of WINNING_COMBINATIONS) {\n    const [a, b, c] = combination;\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n      return board[a] as Player;\n    }\n  }\n  return null;\n};\n\n/**\n * Check if the game is a draw (board full with no winner)\n * @param board Current board state\n * @returns True if the game is a draw\n */\nexport const checkDraw = (board: Board): boolean => {\n  return board.every(cell => cell !== null) && !checkWinner(board);\n};\n\n/**\n * Get the winning line indices if there's a winner\n * @param board Current board state\n * @returns Array of winning indices or null\n */\nexport const getWinningLine = (board: Board): number[] | null => {\n  for (const combination of WINNING_COMBINATIONS) {\n    const [a, b, c] = combination;\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n      return combination;\n    }\n  }\n  return null;\n};\n\n/**\n * Make a move on the board\n * @param board Current board state\n * @param index Square index to place the move\n * @param player Player making the move\n * @returns New board state or null if move is invalid\n */\nexport const makeMove = (board: Board, index: number, player: Player): Board | null => {\n  if (index < 0 || index >= 9 || board[index] !== null) {\n    return null; // Invalid move\n  }\n  \n  const newBoard = [...board];\n  newBoard[index] = player;\n  return newBoard;\n};\n\n/**\n * Get available moves (empty squares)\n * @param board Current board state\n * @returns Array of available move indices\n */\nexport const getAvailableMoves = (board: Board): number[] => {\n  return board\n    .map((cell, index) => cell === null ? index : null)\n    .filter(index => index !== null) as number[];\n};\n\n/**\n * Switch to the other player\n * @param currentPlayer Current player\n * @returns Other player\n */\nexport const switchPlayer = (currentPlayer: Player): Player => {\n  return currentPlayer === 'X' ? 'O' : 'X';\n};\n\n/**\n * Check if a move is valid\n * @param board Current board state\n * @param index Square index to check\n * @returns True if the move is valid\n */\nexport const isValidMove = (board: Board, index: number): boolean => {\n  return index >= 0 && index < 9 && board[index] === null;\n};\n\n/**\n * Create a new game state\n * @param gameMode Game mode to set\n * @returns Initial game state\n */\nexport const createNewGameState = (gameMode: 'ai' | 'player' | 'menu' = 'menu'): GameState => {\n  return {\n    board: [...INITIAL_BOARD],\n    currentPlayer: 'X',\n    winner: null,\n    isDraw: false,\n    isGameOver: false,\n    gameMode,\n    moveCount: 0,\n  };\n};\n\n/**\n * Update game state after a move\n * @param gameState Current game state\n * @param moveIndex Index of the move\n * @returns Updated game state\n */\nexport const updateGameState = (gameState: GameState, moveIndex: number): GameState => {\n  const newBoard = makeMove(gameState.board, moveIndex, gameState.currentPlayer);\n  \n  if (!newBoard) {\n    return gameState; // Invalid move, return unchanged state\n  }\n  \n  const winner = checkWinner(newBoard);\n  const isDraw = checkDraw(newBoard);\n  const isGameOver = winner !== null || isDraw;\n  \n  return {\n    ...gameState,\n    board: newBoard,\n    currentPlayer: isGameOver ? gameState.currentPlayer : switchPlayer(gameState.currentPlayer),\n    winner,\n    isDraw,\n    isGameOver,\n    moveCount: gameState.moveCount + 1,\n  };\n};\n\n/**\n * Get game status message\n * @param gameState Current game state\n * @returns Status message string\n */\nexport const getGameStatusMessage = (gameState: GameState): string => {\n  if (gameState.winner) {\n    return `Player ${gameState.winner} wins!`;\n  }\n  \n  if (gameState.isDraw) {\n    return \"It's a draw!\";\n  }\n  \n  if (gameState.gameMode === 'ai' && gameState.currentPlayer === 'O') {\n    return \"AI is thinking...\";\n  }\n  \n  return `Player ${gameState.currentPlayer}'s turn`;\n};\n\n/**\n * Check if it's AI's turn\n * @param gameState Current game state\n * @returns True if it's AI's turn\n */\nexport const isAITurn = (gameState: GameState): boolean => {\n  return gameState.gameMode === 'ai' && \n         gameState.currentPlayer === 'O' && \n         !gameState.isGameOver;\n};\n\n/**\n * Get the pattern type of a winning line\n * @param winningIndices Winning line indices\n * @returns Pattern type\n */\nexport const getWinningPattern = (winningIndices: number[]): 'row' | 'column' | 'diagonal' => {\n  const [a, b, c] = winningIndices.sort((x, y) => x - y);\n  \n  // Check for rows\n  if (Math.floor(a / 3) === Math.floor(b / 3) && Math.floor(b / 3) === Math.floor(c / 3)) {\n    return 'row';\n  }\n  \n  // Check for columns\n  if (a % 3 === b % 3 && b % 3 === c % 3) {\n    return 'column';\n  }\n  \n  // Must be diagonal\n  return 'diagonal';\n};\n\nexport default {\n  checkWinner,\n  checkDraw,\n  getWinningLine,\n  makeMove,\n  getAvailableMoves,\n  switchPlayer,\n  isValidMove,\n  createNewGameState,\n  updateGameState,\n  getGameStatusMessage,\n  isAITurn,\n  getWinningPattern,\n}; ",
                  "language": "typescript",
                  "description": "Main content of core/game/logic.ts",
                  "order": 0,
                  "file": "core/game/logic.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 220
                  }
                }
              ]
            },
            {
              "path": "core/game/utils.ts",
              "name": "utils.ts",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_07601589",
                  "type": "code",
                  "content": "// Game Utilities for Tic-Tac-Toe\n\nimport { GameStats, GameState, Player } from '@core/types';\n\n/**\n * Local Storage Keys\n */\nconst STORAGE_KEYS = {\n  GAME_STATS: 'tic-tac-toe-stats',\n  GAME_STATE: 'tic-tac-toe-game-state',\n  SETTINGS: 'tic-tac-toe-settings',\n} as const;\n\n/**\n * Save game statistics to local storage\n * @param stats Game statistics to save\n */\nexport const saveGameStats = (stats: GameStats): void => {\n  try {\n    localStorage.setItem(STORAGE_KEYS.GAME_STATS, JSON.stringify(stats));\n  } catch (error) {\n    console.warn('Failed to save game stats:', error);\n  }\n};\n\n/**\n * Load game statistics from local storage\n * @returns Saved game statistics or default stats\n */\nexport const loadGameStats = (): GameStats => {\n  try {\n    const saved = localStorage.getItem(STORAGE_KEYS.GAME_STATS);\n    if (saved) {\n      const stats = JSON.parse(saved) as GameStats;\n      // Recalculate win rate to ensure accuracy\n      stats.winRate = stats.gamesPlayed > 0 ? (stats.wins / stats.gamesPlayed) * 100 : 0;\n      return stats;\n    }\n  } catch (error) {\n    console.warn('Failed to load game stats:', error);\n  }\n  \n  return {\n    gamesPlayed: 0,\n    wins: 0,\n    losses: 0,\n    draws: 0,\n    winRate: 0,\n  };\n};\n\n/**\n * Update game statistics after a game ends\n * @param currentStats Current statistics\n * @param winner Winner of the game (null for draw)\n * @param gameMode Game mode played\n * @returns Updated statistics\n */\nexport const updateGameStats = (\n  currentStats: GameStats,\n  winner: Player | null,\n  gameMode: 'ai' | 'player'\n): GameStats => {\n  const newStats = { ...currentStats };\n  newStats.gamesPlayed += 1;\n  \n  if (winner === null) {\n    newStats.draws += 1;\n  } else if (winner === 'X') {\n    newStats.wins += 1;\n  } else {\n    newStats.losses += 1;\n  }\n  \n  newStats.winRate = (newStats.wins / newStats.gamesPlayed) * 100;\n  \n  saveGameStats(newStats);\n  return newStats;\n};\n\n/**\n * Reset game statistics\n * @returns Reset statistics\n */\nexport const resetGameStats = (): GameStats => {\n  const resetStats: GameStats = {\n    gamesPlayed: 0,\n    wins: 0,\n    losses: 0,\n    draws: 0,\n    winRate: 0,\n  };\n  \n  saveGameStats(resetStats);\n  return resetStats;\n};\n\n/**\n * Save game state to local storage\n * @param gameState Game state to save\n */\nexport const saveGameState = (gameState: GameState): void => {\n  try {\n    localStorage.setItem(STORAGE_KEYS.GAME_STATE, JSON.stringify(gameState));\n  } catch (error) {\n    console.warn('Failed to save game state:', error);\n  }\n};\n\n/**\n * Load game state from local storage\n * @returns Saved game state or null\n */\nexport const loadGameState = (): GameState | null => {\n  try {\n    const saved = localStorage.getItem(STORAGE_KEYS.GAME_STATE);\n    if (saved) {\n      return JSON.parse(saved) as GameState;\n    }\n  } catch (error) {\n    console.warn('Failed to load game state:', error);\n  }\n  \n  return null;\n};\n\n/**\n * Clear saved game state\n */\nexport const clearSavedGameState = (): void => {\n  try {\n    localStorage.removeItem(STORAGE_KEYS.GAME_STATE);\n  } catch (error) {\n    console.warn('Failed to clear saved game state:', error);\n  }\n};\n\n/**\n * Format game statistics for display\n * @param stats Game statistics\n * @returns Formatted statistics object\n */\nexport const formatGameStats = (stats: GameStats) => {\n  return {\n    gamesPlayed: stats.gamesPlayed.toString(),\n    wins: stats.wins.toString(),\n    losses: stats.losses.toString(),\n    draws: stats.draws.toString(),\n    winRate: stats.winRate.toFixed(1) + '%',\n  };\n};\n\n/**\n * Get game result message\n * @param winner Winner of the game\n * @param gameMode Game mode\n * @returns Result message\n */\nexport const getGameResultMessage = (\n  winner: Player | null,\n  gameMode: 'ai' | 'player'\n): string => {\n  if (winner === null) {\n    return \"It's a draw! 🤝\";\n  }\n  \n  if (gameMode === 'ai') {\n    return winner === 'X' ? \"You won! 🎉\" : \"AI won! 🤖\";\n  }\n  \n  return `Player ${winner} won! 🎉`;\n};\n\n/**\n * Get encouraging message based on game result\n * @param winner Winner of the game\n * @param gameMode Game mode\n * @returns Encouraging message\n */\nexport const getEncouragingMessage = (\n  winner: Player | null,\n  gameMode: 'ai' | 'player'\n): string => {\n  if (winner === null) {\n    return \"Great game! Both players played well.\";\n  }\n  \n  if (gameMode === 'ai') {\n    if (winner === 'X') {\n      return \"Excellent strategy! You outplayed the AI.\";\n    } else {\n      return \"Don't give up! Try a different strategy next time.\";\n    }\n  }\n  \n  return `Congratulations Player ${winner}! Well played.`;\n};\n\n/**\n * Generate a random game tip\n * @returns Random game tip\n */\nexport const getRandomGameTip = (): string => {\n  const tips = [\n    \"Try to control the center square - it's the most valuable position!\",\n    \"Look for opportunities to create multiple winning threats at once.\",\n    \"Block your opponent's winning moves before going for your own.\",\n    \"Corners are strong positions - they're part of multiple winning lines.\",\n    \"Watch out for fork opportunities where you can win in two ways.\",\n    \"Don't just focus on offense - defense is just as important!\",\n    \"The first player (X) has a slight advantage if they play optimally.\",\n    \"Try to think one move ahead of your opponent.\",\n  ];\n  \n  return tips[Math.floor(Math.random() * tips.length)];\n};\n\n/**\n * Check if local storage is available\n * @returns True if local storage is available\n */\nexport const isLocalStorageAvailable = (): boolean => {\n  try {\n    const test = '__localStorage_test__';\n    localStorage.setItem(test, 'test');\n    localStorage.removeItem(test);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Debounce function to limit how often a function can be called\n * @param func Function to debounce\n * @param wait Wait time in milliseconds\n * @returns Debounced function\n */\nexport const debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): ((...args: Parameters<T>) => void) => {\n  let timeout: number;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n};\n\n/**\n * Format time duration in milliseconds to readable format\n * @param ms Time in milliseconds\n * @returns Formatted time string\n */\nexport const formatDuration = (ms: number): string => {\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  \n  if (minutes > 0) {\n    return `${minutes}m ${seconds % 60}s`;\n  }\n  \n  return `${seconds}s`;\n};\n\n/**\n * Create a delay promise\n * @param ms Delay in milliseconds\n * @returns Promise that resolves after the delay\n */\nexport const delay = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport default {\n  saveGameStats,\n  loadGameStats,\n  updateGameStats,\n  resetGameStats,\n  saveGameState,\n  loadGameState,\n  clearSavedGameState,\n  formatGameStats,\n  getGameResultMessage,\n  getEncouragingMessage,\n  getRandomGameTip,\n  isLocalStorageAvailable,\n  debounce,\n  formatDuration,\n  delay,\n}; ",
                  "language": "typescript",
                  "description": "Main content of core/game/utils.ts",
                  "order": 0,
                  "file": "core/game/utils.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 292
                  }
                }
              ]
            }
          ],
          "modules": {},
          "created": "2025-07-16T04:23:50.450Z"
        },
        "hooks": {
          "name": "hooks",
          "description": "",
          "files": [
            {
              "path": "core/hooks/useGame.ts",
              "name": "useGame.ts",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_c28b9422",
                  "type": "code",
                  "content": "// Custom Hook for Game State Management\n\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  GameState,\n  GameMode,\n  Player,\n  INITIAL_GAME_STATE\n} from '@core/types';\n\nimport {\n  updateGameState,\n  createNewGameState,\n  isAITurn,\n  getWinningLine\n} from '@core/game/logic';\n\nimport { getAIMove } from '@core/game/ai';\nimport {\n  saveGameState,\n  loadGameState,\n  clearSavedGameState\n} from '@core/game/utils';\n\nexport const useGame = () => {\n  const [gameState, setGameState] = useState<GameState>(INITIAL_GAME_STATE);\n  const [isAIThinking, setIsAIThinking] = useState(false);\n\n  // Load saved game state on mount\n  useEffect(() => {\n    const savedState = loadGameState();\n    if (savedState && !savedState.isGameOver) {\n      setGameState(savedState);\n    }\n  }, []);\n\n  // Save game state whenever it changes\n  useEffect(() => {\n    if (gameState.moveCount > 0) {\n      saveGameState(gameState);\n    }\n  }, [gameState]);\n\n  // Handle AI moves\n  useEffect(() => {\n    const makeAIMove = async () => {\n      if (isAITurn(gameState) && !isAIThinking) {\n        setIsAIThinking(true);\n        \n        try {\n          const aiMoveIndex = await getAIMove(gameState.board, 'O', 'hard', 800);\n          \n                     if (aiMoveIndex !== -1) {\n             setGameState((prevState: GameState) => updateGameState(prevState, aiMoveIndex));\n           }\n        } catch (error) {\n          console.error('AI move failed:', error);\n        } finally {\n          setIsAIThinking(false);\n        }\n      }\n    };\n\n    makeAIMove();\n  }, [gameState, isAIThinking]);\n\n  /**\n   * Make a move at the specified index\n   */\n  const makeMove = useCallback((index: number) => {\n    if (\n      gameState.isGameOver ||\n      gameState.board[index] !== null ||\n      isAIThinking ||\n      (gameState.gameMode === 'ai' && gameState.currentPlayer === 'O')\n    ) {\n      return;\n    }\n\n         setGameState((prevState: GameState) => updateGameState(prevState, index));\n  }, [gameState, isAIThinking]);\n\n  /**\n   * Start a new game with the specified mode\n   */\n  const newGame = useCallback((mode: GameMode) => {\n    clearSavedGameState();\n    setGameState(createNewGameState(mode));\n    setIsAIThinking(false);\n  }, []);\n\n  /**\n   * Reset the current game (keep same mode)\n   */\n  const resetGame = useCallback(() => {\n    clearSavedGameState();\n    setGameState((prevState: GameState) => createNewGameState(prevState.gameMode));\n    setIsAIThinking(false);\n  }, []);\n\n  /**\n   * Set the game mode\n   */\n  const setGameMode = useCallback((mode: GameMode) => {\n    setGameState((prevState: GameState) => ({\n      ...prevState,\n      gameMode: mode\n    }));\n  }, []);\n\n  /**\n   * Go back to menu\n   */\n  const goToMenu = useCallback(() => {\n    setGameMode('menu');\n  }, [setGameMode]);\n\n  /**\n   * Get the winning line for highlighting\n   */\n  const winningLine = getWinningLine(gameState.board);\n\n  return {\n    gameState,\n    isAIThinking,\n    winningLine,\n    makeMove,\n    newGame,\n    resetGame,\n    setGameMode,\n    goToMenu,\n  };\n};\n\nexport default useGame; ",
                  "language": "typescript",
                  "description": "Main content of core/hooks/useGame.ts",
                  "order": 0,
                  "file": "core/hooks/useGame.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 135
                  }
                }
              ]
            },
            {
              "path": "core/hooks/useStats.ts",
              "name": "useStats.ts",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_518c26e3",
                  "type": "code",
                  "content": "// Custom Hook for Game Statistics Management\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { GameStats, Player, GameMode } from '@core/types';\n\nimport {\n  loadGameStats,\n  updateGameStats as updateGameStatsUtil,\n  resetGameStats as resetGameStatsUtil,\n  formatGameStats\n} from '@core/game/utils';\n\nexport const useStats = () => {\n  const [stats, setStats] = useState<GameStats>(loadGameStats());\n\n  // Load stats on mount\n  useEffect(() => {\n    setStats(loadGameStats());\n  }, []);\n\n  /**\n   * Update statistics after a game ends\n   */\n  const updateStats = useCallback((winner: Player | null, gameMode: GameMode) => {\n    if (gameMode === 'menu') return;\n    \n    setStats((prevStats: GameStats) => \n      updateGameStatsUtil(prevStats, winner, gameMode as 'ai' | 'player')\n    );\n  }, []);\n\n  /**\n   * Reset all statistics\n   */\n  const resetStats = useCallback(() => {\n    const newStats = resetGameStatsUtil();\n    setStats(newStats);\n  }, []);\n\n  /**\n   * Get formatted statistics for display\n   */\n  const formattedStats = formatGameStats(stats);\n\n  return {\n    stats,\n    formattedStats,\n    updateStats,\n    resetStats,\n  };\n};\n\nexport default useStats; ",
                  "language": "typescript",
                  "description": "Main content of core/hooks/useStats.ts",
                  "order": 0,
                  "file": "core/hooks/useStats.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 53
                  }
                }
              ]
            }
          ],
          "modules": {},
          "created": "2025-07-16T04:23:50.463Z"
        }
      },
      "created": "2025-07-16T04:23:50.434Z"
    },
    "my-project": {
      "name": "my-project",
      "description": "",
      "files": [],
      "modules": {
        "src": {
          "name": "src",
          "description": "",
          "files": [
            {
              "path": "my-project/src/index.ts",
              "name": "index.ts",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_ebe84b76",
                  "type": "code",
                  "content": "---\nid: 4cbf219d-4cbf-4cbf-4cbf-4cbf219d\npath: my-project/src/index.ts\nlevel: file\ntitle: Index\ndescription: TypeScript module - Auto-generated\n---",
                  "language": "typescript",
                  "description": "Code block 1",
                  "order": 0,
                  "file": "my-project/src/index.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 7
                  }
                },
                {
                  "id": "block_4bf6f621",
                  "type": "code",
                  "content": "Main source file",
                  "language": "typescript",
                  "description": "Code block 2",
                  "order": 1,
                  "file": "my-project/src/index.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 10,
                    "endLine": 10
                  }
                }
              ]
            },
            {
              "path": "my-project/src/types.ts",
              "name": "types.ts",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_b98e3f72",
                  "type": "code",
                  "content": "---\nid: 1dc87c96-1dc8-1dc8-1dc8-1dc87c96\npath: my-project/src/types.ts\nlevel: file\ntitle: Types\ndescription: TypeScript module - Auto-generated\n---\nexport interface User {}",
                  "language": "typescript",
                  "description": "Main content of my-project/src/types.ts",
                  "order": 0,
                  "file": "my-project/src/types.ts",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 8
                  }
                }
              ]
            }
          ],
          "modules": {},
          "created": "2025-07-16T04:23:50.474Z"
        }
      },
      "created": "2025-07-16T04:23:50.473Z"
    },
    "my-react-app": {
      "name": "my-react-app",
      "description": "",
      "files": [
        {
          "path": "my-react-app/package.json",
          "name": "package.json",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_2623198a",
              "type": "code",
              "content": "---\nid: 3225a173-3225-3225-3225-3225a173\npath: my-react-app/package.json\nlevel: module\ntitle: Package\ndescription: Configuration file - Auto-generated\n---\n{\"name\": \"my-react-app\"}",
              "language": "json",
              "description": "Main content of my-react-app/package.json",
              "order": 0,
              "file": "my-react-app/package.json",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 8
              }
            }
          ]
        }
      ],
      "modules": {
        "public": {
          "name": "public",
          "description": "",
          "files": [
            {
              "path": "my-react-app/public/index.html",
              "name": "index.html",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_8d5c684b",
                  "type": "code",
                  "content": "---\nid: 3e601c30-3e60-3e60-3e60-3e601c30\npath: my-react-app/public/index.html\nlevel: file\ntitle: Index\ndescription: Source file - Auto-generated\n---\n<!DOCTYPE html>",
                  "language": "html",
                  "description": "Main content of my-react-app/public/index.html",
                  "order": 0,
                  "file": "my-react-app/public/index.html",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 8
                  }
                }
              ]
            }
          ],
          "modules": {},
          "created": "2025-07-16T04:23:50.486Z"
        },
        "src": {
          "name": "src",
          "description": "",
          "files": [
            {
              "path": "my-react-app/src/App.js",
              "name": "App.js",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_bd3d08a1",
                  "type": "code",
                  "content": "---\nid: 194d331e-194d-194d-194d-194d331e\npath: my-react-app/src/App.js\nlevel: file\ntitle: App\ndescription: JavaScript module - Auto-generated\n---\nimport React from \"react\";",
                  "language": "javascript",
                  "description": "Main content of my-react-app/src/App.js",
                  "order": 0,
                  "file": "my-react-app/src/App.js",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 8
                  }
                }
              ]
            },
            {
              "path": "my-react-app/src/index.js",
              "name": "index.js",
              "description": "",
              "codeBlocks": [
                {
                  "id": "block_927e8864",
                  "type": "code",
                  "content": "---\nid: 453e4353-453e-453e-453e-453e4353\npath: my-react-app/src/index.js\nlevel: file\ntitle: Index\ndescription: JavaScript module - Auto-generated\n---\nimport App from \"./App\";",
                  "language": "javascript",
                  "description": "Main content of my-react-app/src/index.js",
                  "order": 0,
                  "file": "my-react-app/src/index.js",
                  "meta": {
                    "segmentType": "other",
                    "startLine": 1,
                    "endLine": 8
                  }
                }
              ]
            }
          ],
          "modules": {},
          "created": "2025-07-16T04:23:50.489Z"
        }
      },
      "created": "2025-07-16T04:23:50.480Z"
    },
    "public": {
      "name": "public",
      "description": "",
      "files": [
        {
          "path": "public/index.html",
          "name": "index.html",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_a3c3cc58",
              "type": "code",
              "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Online multiplayer tic-tac-toe game built with React and TypeScript. Play against friends or challenge the AI!\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    \n    <!-- Google Fonts -->\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n    \n    <title>Tic-Tac-Toe Online</title>\n    \n    <style>\n      /* Loading styles */\n      .loading-container {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        min-height: 100vh;\n        font-family: 'Inter', sans-serif;\n        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n        color: white;\n      }\n      \n      .loading-spinner {\n        width: 40px;\n        height: 40px;\n        border: 4px solid rgba(255, 255, 255, 0.3);\n        border-radius: 50%;\n        border-top-color: white;\n        animation: spin 1s ease-in-out infinite;\n      }\n      \n      @keyframes spin {\n        to { transform: rotate(360deg); }\n      }\n      \n      .loading-text {\n        margin-left: 16px;\n        font-size: 18px;\n        font-weight: 500;\n      }\n    </style>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\">\n      <!-- Loading placeholder -->\n      <div class=\"loading-container\">\n        <div class=\"loading-spinner\"></div>\n        <div class=\"loading-text\">Loading Tic-Tac-Toe...</div>\n      </div>\n    </div>\n  </body>\n</html> ",
              "language": "html",
              "description": "Main content of public/index.html",
              "order": 0,
              "file": "public/index.html",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 64
              }
            }
          ]
        }
      ],
      "modules": {},
      "created": "2025-07-16T04:23:50.493Z"
    },
    "src": {
      "name": "src",
      "description": "",
      "files": [
        {
          "path": "src/App.css",
          "name": "App.css",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_40a7a7b1",
              "type": "code",
              "content": "/* Main App Styles */\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  min-height: 100vh;\n  color: #333;\n}\n\n.App {\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 20px;\n}\n\n/* Responsive design */\n@media (max-width: 768px) {\n  .App {\n    padding: 10px;\n  }\n}\n\n/* Animation utilities */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes bounce {\n  0%, 20%, 60%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-10px);\n  }\n  80% {\n    transform: translateY(-5px);\n  }\n}\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n/* Utility classes */\n.fade-in {\n  animation: fadeIn 0.5s ease-out forwards;\n}\n\n.slide-in {\n  animation: slideIn 0.3s ease-out forwards;\n}\n\n.bounce {\n  animation: bounce 0.6s ease-out forwards;\n}\n\n.pulse {\n  animation: pulse 0.3s ease-out forwards;\n}\n\n/* Loading states */\n.loading {\n  opacity: 0.7;\n  pointer-events: none;\n}\n\n/* Focus styles for accessibility */\n*:focus {\n  outline: 2px solid #667eea;\n  outline-offset: 2px;\n}\n\n/* Scrollbar styles */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: rgba(255, 255, 255, 0.1);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: rgba(255, 255, 255, 0.3);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: rgba(255, 255, 255, 0.5);\n} ",
              "language": "css",
              "description": "Main content of src/App.css",
              "order": 0,
              "file": "src/App.css",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 128
              }
            }
          ]
        },
        {
          "path": "src/App.tsx",
          "name": "App.tsx",
          "description": "",
          "codeBlocks": [
            {
              "id": "block_9a9b3c9d",
              "type": "code",
              "content": "import React from 'react';\nimport './App.css';\nimport TicTacToeGame from './components/TicTacToeGame';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <TicTacToeGame />\n    </div>\n  );\n};\n\nexport default App; ",
              "language": "tsx",
              "description": "Main content of src/App.tsx",
              "order": 0,
              "file": "src/App.tsx",
              "meta": {
                "segmentType": "other",
                "startLine": 1,
                "endLine": 13
              }
            }
          ]
        }
      ],
      "modules": {},
      "created": "2025-07-16T04:23:50.498Z"
    },
    "ui": {
      "name": "ui",
      "description": "",
      "files": [],
      "modules": {
        "components": {
          "name": "components",
          "description": "",
          "files": [],
          "modules": {
            "buttons": {
              "name": "buttons",
              "description": "",
              "files": [
                {
                  "path": "ui/components/buttons/IconButton (1) (1).tsx",
                  "name": "IconButton (1) (1).tsx",
                  "description": "",
                  "codeBlocks": [
                    {
                      "id": "block_b70be215",
                      "type": "code",
                      "content": "---\nid: 0cfec682-0cfe-0cfe-0cfe-0cfec682\npath: ui/components/buttons/IconButton (1) (1).tsx\nlevel: file\ntitle: IconButton (1) (1)\ndescription: React TypeScript component - Auto-generated\n---\n# Moved file",
                      "language": "tsx",
                      "description": "Main content of ui/components/buttons/IconButton (1) (1).tsx",
                      "order": 0,
                      "file": "ui/components/buttons/IconButton (1) (1).tsx",
                      "meta": {
                        "segmentType": "other",
                        "startLine": 1,
                        "endLine": 8
                      }
                    }
                  ]
                },
                {
                  "path": "ui/components/buttons/IconButton (1).tsx",
                  "name": "IconButton (1).tsx",
                  "description": "",
                  "codeBlocks": [
                    {
                      "id": "block_4f35ef14",
                      "type": "code",
                      "content": "---\nid: 438301e2-4383-4383-4383-438301e2\npath: ui/components/buttons/IconButton (1).tsx\nlevel: file\ntitle: IconButton (1)\ndescription: React TypeScript component - Auto-generated\n---\n# Moved file",
                      "language": "tsx",
                      "description": "Main content of ui/components/buttons/IconButton (1).tsx",
                      "order": 0,
                      "file": "ui/components/buttons/IconButton (1).tsx",
                      "meta": {
                        "segmentType": "other",
                        "startLine": 1,
                        "endLine": 8
                      }
                    }
                  ]
                }
              ],
              "modules": {},
              "created": "2025-07-16T04:23:50.504Z"
            }
          },
          "created": "2025-07-16T04:23:50.504Z"
        }
      },
      "created": "2025-07-16T04:23:50.503Z"
    }
  }
}